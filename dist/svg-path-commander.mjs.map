{"version":3,"file":"svg-path-commander.mjs","sources":["../src/options/options.ts","../src/parser/error.ts","../src/parser/paramsCount.ts","../src/parser/finalizeSegment.ts","../src/parser/scanFlag.ts","../src/parser/isDigit.ts","../src/parser/invalidPathValue.ts","../src/parser/scanParam.ts","../src/parser/isSpace.ts","../src/parser/skipSpaces.ts","../src/parser/isPathCommand.ts","../src/parser/isDigitStart.ts","../src/parser/isArcCommand.ts","../src/parser/scanSegment.ts","../src/parser/pathParser.ts","../src/util/isPathArray.ts","../src/parser/parsePathString.ts","../src/math/polygonArea.ts","../src/math/distanceSquareRoot.ts","../src/math/polygonLength.ts","../node_modules/@thednp/dommatrix/dist/dommatrix.mjs","../src/util/isAbsoluteArray.ts","../src/convert/pathToAbsolute.ts","../src/process/normalizeSegment.ts","../src/util/isNormalizedArray.ts","../src/parser/paramsParser.ts","../src/process/normalizePath.ts","../src/math/midPoint.ts","../src/util/segmentLineFactory.ts","../src/util/segmentArcFactory.ts","../src/util/segmentCubicFactory.ts","../src/util/segmentQuadFactory.ts","../src/util/pathLengthFactory.ts","../src/util/getPathBBox.ts","../src/process/fixArc.ts","../src/util/isCurveArray.ts","../src/math/rotateVector.ts","../src/process/arcToCubic.ts","../src/process/quadToCubic.ts","../src/process/lineToCubic.ts","../src/process/segmentToCubic.ts","../src/convert/pathToCurve.ts","../src/util/getPathArea.ts","../src/util/getTotalLength.ts","../src/util/getDrawDirection.ts","../src/util/getPointAtLength.ts","../src/util/getPropertiesAtLength.ts","../src/util/getPropertiesAtPoint.ts","../src/util/getClosestPoint.ts","../src/util/getSegmentOfPoint.ts","../src/util/getSegmentAtLength.ts","../src/util/isPointInStroke.ts","../src/util/isValidPath.ts","../src/util/isRelativeArray.ts","../src/util/shapeParams.ts","../src/util/shapeToPathArray.ts","../src/process/roundPath.ts","../src/convert/pathToString.ts","../src/util/shapeToPath.ts","../src/process/splitPath.ts","../src/convert/pathToRelative.ts","../src/process/shortenSegment.ts","../src/process/optimizePath.ts","../src/process/reverseCurve.ts","../src/process/reversePath.ts","../src/process/getSVGMatrix.ts","../src/process/projection2d.ts","../src/process/transformPath.ts","../src/process/splitCubic.ts","../src/index.ts"],"sourcesContent":["import { Options } from '../interface';\n\n/** SVGPathCommander default options */\nconst defaultOptions: Options = {\n  origin: [0, 0, 0],\n  round: 4,\n};\n\nexport default defaultOptions;\n","const error = 'SVGPathCommander Error';\nexport default error;\n","/** Segment params length */\nconst paramsCount = {\n  a: 7,\n  c: 6,\n  h: 1,\n  l: 2,\n  m: 2,\n  r: 4,\n  q: 4,\n  s: 4,\n  t: 2,\n  v: 1,\n  z: 0,\n};\n\nexport default paramsCount;\n","import paramsCount from './paramsCount';\nimport PathParser from './pathParser';\nimport type { PathCommand, PathSegment, RelativeCommand } from '../types';\n\n/**\n * Breaks the parsing of a pathString once a segment is finalized.\n *\n * @param path the `PathParser` instance\n */\nconst finalizeSegment = (path: PathParser) => {\n  let pathCommand = path.pathValue[path.segmentStart] as PathCommand;\n  let LK = pathCommand.toLowerCase() as RelativeCommand;\n  const { data } = path;\n\n  while (data.length >= paramsCount[LK]) {\n    // overloaded `moveTo`\n    // https://github.com/rveciana/svg-path-properties/blob/master/src/parse.ts\n    if (LK === 'm' && data.length > 2) {\n      path.segments.push([pathCommand, ...(data.splice(0, 2) as number[])] as PathSegment);\n      LK = 'l';\n      pathCommand = pathCommand === 'm' ? 'l' : 'L';\n    } else {\n      path.segments.push([pathCommand, ...(data.splice(0, paramsCount[LK]) as number[])] as PathSegment);\n    }\n\n    if (!paramsCount[LK]) {\n      break;\n    }\n  }\n};\nexport default finalizeSegment;\n","import error from './error';\nimport type PathParser from './pathParser';\n\n/**\n * Validates an A (arc-to) specific path command value.\n * Usually a `large-arc-flag` or `sweep-flag`.\n *\n * @param path the `PathParser` instance\n */\nconst scanFlag = (path: PathParser) => {\n  const { index, pathValue } = path;\n  const code = pathValue.charCodeAt(index);\n\n  if (code === 0x30 /* 0 */) {\n    path.param = 0;\n    path.index += 1;\n    return;\n  }\n\n  if (code === 0x31 /* 1 */) {\n    path.param = 1;\n    path.index += 1;\n    return;\n  }\n\n  path.err = `${error}: invalid Arc flag \"${pathValue[index]}\", expecting 0 or 1 at index ${index}`;\n};\n\nexport default scanFlag;\n","import { DigitNumber } from '../types';\n\n/**\n * Checks if a character is a digit.\n *\n * @param code the character to check\n * @returns check result\n */\nconst isDigit = (code: number): code is DigitNumber => {\n  return code >= 48 && code <= 57; // 0..9\n};\nexport default isDigit;\n","const invalidPathValue = 'Invalid path value';\nexport default invalidPathValue;\n","import isDigit from './isDigit';\nimport invalidPathValue from './invalidPathValue';\nimport error from './error';\nimport type PathParser from './pathParser';\n\n/**\n * Validates every character of the path string,\n * every path command, negative numbers or floating point numbers.\n *\n * @param path the `PathParser` instance\n */\nconst scanParam = (path: PathParser) => {\n  const { max, pathValue, index: start } = path;\n  let index = start;\n  let zeroFirst = false;\n  let hasCeiling = false;\n  let hasDecimal = false;\n  let hasDot = false;\n  let ch;\n\n  if (index >= max) {\n    path.err = `${error}: ${invalidPathValue} at index ${index}, \"pathValue\" is missing param`;\n    return;\n  }\n  ch = pathValue.charCodeAt(index);\n\n  if (ch === 0x2b /* + */ || ch === 0x2d /* - */) {\n    index += 1;\n    // ch = (index < max) ? pathValue.charCodeAt(index) : 0;\n    ch = pathValue.charCodeAt(index);\n  }\n\n  // This logic is shamelessly borrowed from Esprima\n  // https://github.com/ariya/esprimas\n  if (!isDigit(ch) && ch !== 0x2e /* . */) {\n    // path.err = 'SvgPath: param should start with 0..9 or `.` (at pos ' + index + ')';\n    path.err = `${error}: ${invalidPathValue} at index ${index}, \"${pathValue[index]}\" is not a number`;\n    return;\n  }\n\n  if (ch !== 0x2e /* . */) {\n    zeroFirst = ch === 0x30 /* 0 */;\n    index += 1;\n\n    ch = pathValue.charCodeAt(index);\n\n    if (zeroFirst && index < max) {\n      // decimal number starts with '0' such as '09' is illegal.\n      if (ch && isDigit(ch)) {\n        // path.err = 'SvgPath: numbers started with `0` such as `09`\n        // are illegal (at pos ' + start + ')';\n        path.err = `${error}: ${invalidPathValue} at index ${start}, \"${pathValue[start]}\" illegal number`;\n        return;\n      }\n    }\n\n    while (index < max && isDigit(pathValue.charCodeAt(index))) {\n      index += 1;\n      hasCeiling = true;\n    }\n\n    ch = pathValue.charCodeAt(index);\n  }\n\n  if (ch === 0x2e /* . */) {\n    hasDot = true;\n    index += 1;\n    while (isDigit(pathValue.charCodeAt(index))) {\n      index += 1;\n      hasDecimal = true;\n    }\n\n    ch = pathValue.charCodeAt(index);\n  }\n\n  if (ch === 0x65 /* e */ || ch === 0x45 /* E */) {\n    if (hasDot && !hasCeiling && !hasDecimal) {\n      path.err = `${error}: ${invalidPathValue} at index ${index}, \"${pathValue[index]}\" invalid float exponent`;\n      return;\n    }\n\n    index += 1;\n\n    ch = pathValue.charCodeAt(index);\n\n    if (ch === 0x2b /* + */ || ch === 0x2d /* - */) {\n      index += 1;\n    }\n    if (index < max && isDigit(pathValue.charCodeAt(index))) {\n      while (index < max && isDigit(pathValue.charCodeAt(index))) {\n        index += 1;\n      }\n    } else {\n      path.err = `${error}: ${invalidPathValue} at index ${index}, \"${pathValue[index]}\" invalid integer exponent`;\n      return;\n    }\n  }\n\n  path.index = index;\n  path.param = +path.pathValue.slice(start, index);\n};\nexport default scanParam;\n","import type { SpaceNumber } from '../types';\n\n/**\n * Checks if the character is a space.\n *\n * @param ch the character to check\n * @returns check result\n */\n\nconst isSpace = (ch: number): ch is SpaceNumber => {\n  const allSpaces = [\n    // Special spaces\n    0x1680, 0x180e, 0x2000, 0x2001, 0x2002, 0x2003, 0x2004, 0x2005, 0x2006, 0x2007, 0x2008, 0x2009, 0x200a, 0x202f,\n    0x205f, 0x3000, 0xfeff,\n    // Line terminators\n    0x0a, 0x0d, 0x2028, 0x2029,\n    // White spaces\n    0x20, 0x09, 0x0b, 0x0c, 0xa0,\n  ];\n\n  return allSpaces.includes(ch);\n};\nexport default isSpace;\n","import isSpace from './isSpace';\nimport type PathParser from './pathParser';\n\n/**\n * Points the parser to the next character in the\n * path string every time it encounters any kind of\n * space character.\n *\n * @param path the `PathParser` instance\n */\nconst skipSpaces = (path: PathParser) => {\n  const { pathValue, max } = path;\n  while (path.index < max && isSpace(pathValue.charCodeAt(path.index))) {\n    path.index += 1;\n  }\n};\nexport default skipSpaces;\n","import type { PathCommandNumber } from '../types';\n\n/**\n * Checks if the character is a path command.\n *\n * @param code the character to check\n * @returns check result\n */\nconst isPathCommand = (code: number): code is PathCommandNumber => {\n  // eslint-disable-next-line no-bitwise -- Impossible to satisfy\n  switch (code | 0x20) {\n    case 0x6d /* m */:\n    case 0x7a /* z */:\n    case 0x6c /* l */:\n    case 0x68 /* h */:\n    case 0x76 /* v */:\n    case 0x63 /* c */:\n    case 0x73 /* s */:\n    case 0x71 /* q */:\n    case 0x74 /* t */:\n    case 0x61 /* a */:\n      // case 0x72/* r */:\n      return true;\n    default:\n      return false;\n  }\n};\nexport default isPathCommand;\n","import isDigit from './isDigit';\nimport type { DigitNumber } from '../types';\n\n/**\n * Checks if the character is or belongs to a number.\n * [0-9]|+|-|.\n *\n * @param code the character to check\n * @returns check result\n */\nconst isDigitStart = (code: number): code is DigitNumber | 0x2b | 0x2d | 0x2e => {\n  return isDigit(code) /* 0..9 */ || code === 0x2b /* + */ || code === 0x2d /* - */ || code === 0x2e; /* . */\n};\nexport default isDigitStart;\n","/**\n * Checks if the character is an A (arc-to) path command.\n *\n * @param code the character to check\n * @returns check result\n */\nconst isArcCommand = (code: number): code is 0x61 => {\n  // eslint-disable-next-line no-bitwise -- Impossible to satisfy\n  return (code | 0x20) === 0x61;\n};\nexport default isArcCommand;\n","import finalizeSegment from './finalizeSegment';\nimport paramCounts from './paramsCount';\nimport scanFlag from './scanFlag';\nimport scanParam from './scanParam';\nimport skipSpaces from './skipSpaces';\nimport isPathCommand from './isPathCommand';\nimport isDigitStart from './isDigitStart';\nimport isArcCommand from './isArcCommand';\nimport invalidPathValue from './invalidPathValue';\nimport error from './error';\n\nimport type PathParser from './pathParser';\nimport { RelativeCommand } from '../types';\n\n/**\n * Scans every character in the path string to determine\n * where a segment starts and where it ends.\n *\n * @param path the `PathParser` instance\n */\nconst scanSegment = (path: PathParser) => {\n  const { max, pathValue, index } = path;\n  const cmdCode = pathValue.charCodeAt(index);\n  const reqParams = paramCounts[pathValue[index].toLowerCase() as RelativeCommand];\n\n  path.segmentStart = index;\n\n  if (!isPathCommand(cmdCode)) {\n    path.err = `${error}: ${invalidPathValue} \"${pathValue[index]}\" is not a path command`;\n    return;\n  }\n\n  path.index += 1;\n  skipSpaces(path);\n\n  path.data = [];\n\n  if (!reqParams) {\n    // Z\n    finalizeSegment(path);\n    return;\n  }\n\n  for (;;) {\n    for (let i = reqParams; i > 0; i -= 1) {\n      if (isArcCommand(cmdCode) && (i === 3 || i === 4)) scanFlag(path);\n      else scanParam(path);\n\n      if (path.err.length) {\n        return;\n      }\n      path.data.push(path.param);\n\n      skipSpaces(path);\n\n      // after ',' param is mandatory\n      if (path.index < max && pathValue.charCodeAt(path.index) === 0x2c /* , */) {\n        path.index += 1;\n        skipSpaces(path);\n      }\n    }\n\n    if (path.index >= path.max) {\n      break;\n    }\n\n    // Stop on next segment\n    if (!isDigitStart(pathValue.charCodeAt(path.index))) {\n      break;\n    }\n  }\n\n  finalizeSegment(path);\n};\nexport default scanSegment;\n","import type { PathArray, PathSegment } from '../types';\n\n/**\n * The `PathParser` is used by the `parsePathString` static method\n * to generate a `pathArray`.\n *\n * @param pathString\n */\nexport default class PathParser {\n  declare segments: PathArray | PathSegment[];\n  declare pathValue: string;\n  declare max: number;\n  declare index: number;\n  declare param: number;\n  declare segmentStart: number;\n  declare data: any[];\n  declare err: string;\n\n  constructor(pathString: string) {\n    this.segments = [];\n    this.pathValue = pathString;\n    this.max = pathString.length;\n    this.index = 0;\n    this.param = 0.0;\n    this.segmentStart = 0;\n    this.data = [];\n    this.err = '';\n  }\n}\n","import type { PathArray, PathSegment, RelativeCommand } from '../types';\nimport paramsCount from '../parser/paramsCount';\n\n/**\n * Iterates an array to check if it's an actual `pathArray`.\n *\n * @param path the `pathArray` to be checked\n * @returns iteration result\n */\nconst isPathArray = (path: unknown): path is PathArray => {\n  return (\n    Array.isArray(path) &&\n    path.every((seg: PathSegment) => {\n      const lk = seg[0].toLowerCase() as RelativeCommand;\n      return (\n        paramsCount[lk] === seg.length - 1 &&\n        'achlmqstvz'.includes(lk) &&\n        (seg.slice(1) as unknown[]).every(Number.isFinite)\n      );\n    }) &&\n    path.length > 0\n  );\n};\nexport default isPathArray;\n","import scanSegment from './scanSegment';\nimport skipSpaces from './skipSpaces';\nimport PathParser from './pathParser';\nimport isPathArray from '../util/isPathArray';\nimport type { PathArray } from '../types';\n\n/**\n * Parses a path string value and returns an array\n * of segments we like to call `pathArray`.\n *\n * @param pathInput the string to be parsed\n * @returns the resulted `pathArray` or error string\n */\nconst parsePathString = (pathInput: string | PathArray): PathArray => {\n  if (isPathArray(pathInput)) {\n    return [...pathInput];\n  }\n\n  const path = new PathParser(pathInput);\n\n  skipSpaces(path);\n\n  while (path.index < path.max && !path.err.length) {\n    scanSegment(path);\n  }\n\n  if (path.err && path.err.length) {\n    throw TypeError(path.err);\n  }\n\n  return path.segments as PathArray;\n};\n\nexport default parsePathString;\n","/**\n * d3-polygon-area\n * https://github.com/d3/d3-polygon\n *\n * Returns the area of a polygon.\n *\n * @param polygon an array of coordinates\n * @returns the polygon area\n */\nconst polygonArea = (polygon: [number, number][]): number => {\n  const n = polygon.length;\n  let i = -1;\n  let a;\n  let b = polygon[n - 1];\n  let area = 0;\n\n  /* eslint-disable-next-line */\n  while (++i < n) {\n    a = b;\n    b = polygon[i];\n    area += a[1] * b[0] - a[0] * b[1];\n  }\n\n  return area / 2;\n};\n\nexport default polygonArea;\n","/**\n * Returns the square root of the distance\n * between two given points.\n *\n * @param a the first point coordinates\n * @param b the second point coordinates\n * @returns the distance value\n */\nconst distanceSquareRoot = (a: [number, number], b: [number, number]): number => {\n  return Math.sqrt((a[0] - b[0]) * (a[0] - b[0]) + (a[1] - b[1]) * (a[1] - b[1]));\n};\n\nexport default distanceSquareRoot;\n","import distanceSquareRoot from './distanceSquareRoot';\n\n/**\n * d3-polygon-length\n * https://github.com/d3/d3-polygon\n *\n * Returns the perimeter of a polygon.\n *\n * @param polygon an array of coordinates\n * @returns {number} the polygon length\n */\nconst polygonLength = (polygon: [number, number][]): number => {\n  return polygon.reduce((length, point, i) => {\n    if (i) {\n      return length + distanceSquareRoot(polygon[i - 1], point);\n    }\n    return 0;\n  }, 0);\n};\n\nexport default polygonLength;\n","var Z = Object.defineProperty;\nvar z = (s, t, e) => t in s ? Z(s, t, { enumerable: !0, configurable: !0, writable: !0, value: e }) : s[t] = e;\nvar p = (s, t, e) => (z(s, typeof t != \"symbol\" ? t + \"\" : t, e), e);\nconst $ = {\n  a: 1,\n  b: 0,\n  c: 0,\n  d: 1,\n  e: 0,\n  f: 0,\n  m11: 1,\n  m12: 0,\n  m13: 0,\n  m14: 0,\n  m21: 0,\n  m22: 1,\n  m23: 0,\n  m24: 0,\n  m31: 0,\n  m32: 0,\n  m33: 1,\n  m34: 0,\n  m41: 0,\n  m42: 0,\n  m43: 0,\n  m44: 1,\n  is2D: !0,\n  isIdentity: !0\n}, E = (s) => (s instanceof Float64Array || s instanceof Float32Array || Array.isArray(s) && s.every((t) => typeof t == \"number\")) && [6, 16].some((t) => s.length === t), P = (s) => s instanceof DOMMatrix || s instanceof y || typeof s == \"object\" && Object.keys($).every((t) => s && t in s), g = (s) => {\n  const t = new y(), e = Array.from(s);\n  if (!E(e))\n    throw TypeError(`CSSMatrix: \"${e.join(\",\")}\" must be an array with 6/16 numbers.`);\n  if (e.length === 16) {\n    const [n, i, r, a, l, m, h, c, u, f, w, o, d, A, M, b] = e;\n    t.m11 = n, t.a = n, t.m21 = l, t.c = l, t.m31 = u, t.m41 = d, t.e = d, t.m12 = i, t.b = i, t.m22 = m, t.d = m, t.m32 = f, t.m42 = A, t.f = A, t.m13 = r, t.m23 = h, t.m33 = w, t.m43 = M, t.m14 = a, t.m24 = c, t.m34 = o, t.m44 = b;\n  } else if (e.length === 6) {\n    const [n, i, r, a, l, m] = e;\n    t.m11 = n, t.a = n, t.m12 = i, t.b = i, t.m21 = r, t.c = r, t.m22 = a, t.d = a, t.m41 = l, t.e = l, t.m42 = m, t.f = m;\n  }\n  return t;\n}, X = (s) => {\n  if (P(s))\n    return g([\n      s.m11,\n      s.m12,\n      s.m13,\n      s.m14,\n      s.m21,\n      s.m22,\n      s.m23,\n      s.m24,\n      s.m31,\n      s.m32,\n      s.m33,\n      s.m34,\n      s.m41,\n      s.m42,\n      s.m43,\n      s.m44\n    ]);\n  throw TypeError(`CSSMatrix: \"${JSON.stringify(s)}\" is not a DOMMatrix / CSSMatrix / JSON compatible object.`);\n}, O = (s) => {\n  if (typeof s != \"string\")\n    throw TypeError(`CSSMatrix: \"${JSON.stringify(s)}\" is not a string.`);\n  const t = String(s).replace(/\\s/g, \"\");\n  let e = new y();\n  const n = `CSSMatrix: invalid transform string \"${s}\"`;\n  return t.split(\")\").filter((i) => i).forEach((i) => {\n    const [r, a] = i.split(\"(\");\n    if (!a)\n      throw TypeError(n);\n    const l = a.split(\",\").map((o) => o.includes(\"rad\") ? parseFloat(o) * (180 / Math.PI) : parseFloat(o)), [m, h, c, u] = l, f = [m, h, c], w = [m, h, c, u];\n    if (r === \"perspective\" && m && [h, c].every((o) => o === void 0))\n      e.m34 = -1 / m;\n    else if (r.includes(\"matrix\") && [6, 16].includes(l.length) && l.every((o) => !Number.isNaN(+o))) {\n      const o = l.map((d) => Math.abs(d) < 1e-6 ? 0 : d);\n      e = e.multiply(g(o));\n    } else if (r === \"translate3d\" && f.every((o) => !Number.isNaN(+o)))\n      e = e.translate(m, h, c);\n    else if (r === \"translate\" && m && c === void 0)\n      e = e.translate(m, h || 0, 0);\n    else if (r === \"rotate3d\" && w.every((o) => !Number.isNaN(+o)) && u)\n      e = e.rotateAxisAngle(m, h, c, u);\n    else if (r === \"rotate\" && m && [h, c].every((o) => o === void 0))\n      e = e.rotate(0, 0, m);\n    else if (r === \"scale3d\" && f.every((o) => !Number.isNaN(+o)) && f.some((o) => o !== 1))\n      e = e.scale(m, h, c);\n    else if (r === \"scale\" && !Number.isNaN(m) && m !== 1 && c === void 0) {\n      const d = Number.isNaN(+h) ? m : h;\n      e = e.scale(m, d, 1);\n    } else if (r === \"skew\" && (m || !Number.isNaN(m) && h) && c === void 0)\n      e = e.skew(m, h || 0);\n    else if ([\"translate\", \"rotate\", \"scale\", \"skew\"].some((o) => r.includes(o)) && /[XYZ]/.test(r) && m && [h, c].every((o) => o === void 0))\n      if (r === \"skewX\" || r === \"skewY\")\n        e = e[r](m);\n      else {\n        const o = r.replace(/[XYZ]/, \"\"), d = r.replace(o, \"\"), A = [\"X\", \"Y\", \"Z\"].indexOf(d), M = o === \"scale\" ? 1 : 0, b = [A === 0 ? m : M, A === 1 ? m : M, A === 2 ? m : M];\n        e = e[o](...b);\n      }\n    else\n      throw TypeError(n);\n  }), e;\n}, x = (s, t) => t ? [s.a, s.b, s.c, s.d, s.e, s.f] : [\n  s.m11,\n  s.m12,\n  s.m13,\n  s.m14,\n  s.m21,\n  s.m22,\n  s.m23,\n  s.m24,\n  s.m31,\n  s.m32,\n  s.m33,\n  s.m34,\n  s.m41,\n  s.m42,\n  s.m43,\n  s.m44\n], Y = (s, t, e) => {\n  const n = new y();\n  return n.m41 = s, n.e = s, n.m42 = t, n.f = t, n.m43 = e, n;\n}, F = (s, t, e) => {\n  const n = new y(), i = Math.PI / 180, r = s * i, a = t * i, l = e * i, m = Math.cos(r), h = -Math.sin(r), c = Math.cos(a), u = -Math.sin(a), f = Math.cos(l), w = -Math.sin(l), o = c * f, d = -c * w;\n  n.m11 = o, n.a = o, n.m12 = d, n.b = d, n.m13 = u;\n  const A = h * u * f + m * w;\n  n.m21 = A, n.c = A;\n  const M = m * f - h * u * w;\n  return n.m22 = M, n.d = M, n.m23 = -h * c, n.m31 = h * w - m * u * f, n.m32 = h * f + m * u * w, n.m33 = m * c, n;\n}, T = (s, t, e, n) => {\n  const i = new y(), r = Math.sqrt(s * s + t * t + e * e);\n  if (r === 0)\n    return i;\n  const a = s / r, l = t / r, m = e / r, h = n * (Math.PI / 360), c = Math.sin(h), u = Math.cos(h), f = c * c, w = a * a, o = l * l, d = m * m, A = 1 - 2 * (o + d) * f;\n  i.m11 = A, i.a = A;\n  const M = 2 * (a * l * f + m * c * u);\n  i.m12 = M, i.b = M, i.m13 = 2 * (a * m * f - l * c * u);\n  const b = 2 * (l * a * f - m * c * u);\n  i.m21 = b, i.c = b;\n  const k = 1 - 2 * (d + w) * f;\n  return i.m22 = k, i.d = k, i.m23 = 2 * (l * m * f + a * c * u), i.m31 = 2 * (m * a * f + l * c * u), i.m32 = 2 * (m * l * f - a * c * u), i.m33 = 1 - 2 * (w + o) * f, i;\n}, I = (s, t, e) => {\n  const n = new y();\n  return n.m11 = s, n.a = s, n.m22 = t, n.d = t, n.m33 = e, n;\n}, v = (s, t) => {\n  const e = new y();\n  if (s) {\n    const n = s * Math.PI / 180, i = Math.tan(n);\n    e.m21 = i, e.c = i;\n  }\n  if (t) {\n    const n = t * Math.PI / 180, i = Math.tan(n);\n    e.m12 = i, e.b = i;\n  }\n  return e;\n}, R = (s) => v(s, 0), D = (s) => v(0, s), N = (s, t) => {\n  const e = t.m11 * s.m11 + t.m12 * s.m21 + t.m13 * s.m31 + t.m14 * s.m41, n = t.m11 * s.m12 + t.m12 * s.m22 + t.m13 * s.m32 + t.m14 * s.m42, i = t.m11 * s.m13 + t.m12 * s.m23 + t.m13 * s.m33 + t.m14 * s.m43, r = t.m11 * s.m14 + t.m12 * s.m24 + t.m13 * s.m34 + t.m14 * s.m44, a = t.m21 * s.m11 + t.m22 * s.m21 + t.m23 * s.m31 + t.m24 * s.m41, l = t.m21 * s.m12 + t.m22 * s.m22 + t.m23 * s.m32 + t.m24 * s.m42, m = t.m21 * s.m13 + t.m22 * s.m23 + t.m23 * s.m33 + t.m24 * s.m43, h = t.m21 * s.m14 + t.m22 * s.m24 + t.m23 * s.m34 + t.m24 * s.m44, c = t.m31 * s.m11 + t.m32 * s.m21 + t.m33 * s.m31 + t.m34 * s.m41, u = t.m31 * s.m12 + t.m32 * s.m22 + t.m33 * s.m32 + t.m34 * s.m42, f = t.m31 * s.m13 + t.m32 * s.m23 + t.m33 * s.m33 + t.m34 * s.m43, w = t.m31 * s.m14 + t.m32 * s.m24 + t.m33 * s.m34 + t.m34 * s.m44, o = t.m41 * s.m11 + t.m42 * s.m21 + t.m43 * s.m31 + t.m44 * s.m41, d = t.m41 * s.m12 + t.m42 * s.m22 + t.m43 * s.m32 + t.m44 * s.m42, A = t.m41 * s.m13 + t.m42 * s.m23 + t.m43 * s.m33 + t.m44 * s.m43, M = t.m41 * s.m14 + t.m42 * s.m24 + t.m43 * s.m34 + t.m44 * s.m44;\n  return g([e, n, i, r, a, l, m, h, c, u, f, w, o, d, A, M]);\n};\nclass y {\n  /**\n   * @constructor\n   * @param init accepts all parameter configurations:\n   * * valid CSS transform string,\n   * * CSSMatrix/DOMMatrix instance,\n   * * a 6/16 elements *Array*.\n   */\n  constructor(t) {\n    return this.a = 1, this.b = 0, this.c = 0, this.d = 1, this.e = 0, this.f = 0, this.m11 = 1, this.m12 = 0, this.m13 = 0, this.m14 = 0, this.m21 = 0, this.m22 = 1, this.m23 = 0, this.m24 = 0, this.m31 = 0, this.m32 = 0, this.m33 = 1, this.m34 = 0, this.m41 = 0, this.m42 = 0, this.m43 = 0, this.m44 = 1, t ? this.setMatrixValue(t) : this;\n  }\n  /**\n   * A `Boolean` whose value is `true` if the matrix is the identity matrix. The identity\n   * matrix is one in which every value is 0 except those on the main diagonal from top-left\n   * to bottom-right corner (in other words, where the offsets in each direction are equal).\n   *\n   * @return the current property value\n   */\n  get isIdentity() {\n    return this.m11 === 1 && this.m12 === 0 && this.m13 === 0 && this.m14 === 0 && this.m21 === 0 && this.m22 === 1 && this.m23 === 0 && this.m24 === 0 && this.m31 === 0 && this.m32 === 0 && this.m33 === 1 && this.m34 === 0 && this.m41 === 0 && this.m42 === 0 && this.m43 === 0 && this.m44 === 1;\n  }\n  /**\n   * A `Boolean` flag whose value is `true` if the matrix was initialized as a 2D matrix\n   * and `false` if the matrix is 3D.\n   *\n   * @return the current property value\n   */\n  get is2D() {\n    return this.m31 === 0 && this.m32 === 0 && this.m33 === 1 && this.m34 === 0 && this.m43 === 0 && this.m44 === 1;\n  }\n  /**\n   * The `setMatrixValue` method replaces the existing matrix with one computed\n   * in the browser. EG: `matrix(1,0.25,-0.25,1,0,0)`\n   *\n   * The method accepts any *Array* values, the result of\n   * `DOMMatrix` instance method `toFloat64Array()` / `toFloat32Array()` calls\n   * or `CSSMatrix` instance method `toArray()`.\n   *\n   * This method expects valid *matrix()* / *matrix3d()* string values, as well\n   * as other transform functions like *translateX(10px)*.\n   *\n   * @param source\n   * @return the matrix instance\n   */\n  setMatrixValue(t) {\n    return typeof t == \"string\" && t.length && t !== \"none\" ? O(t) : Array.isArray(t) || t instanceof Float64Array || t instanceof Float32Array ? g(t) : typeof t == \"object\" ? X(t) : this;\n  }\n  /**\n   * Returns a *Float32Array* containing elements which comprise the matrix.\n   * The method can return either the 16 elements or the 6 elements\n   * depending on the value of the `is2D` parameter.\n   *\n   * @param is2D *Array* representation of the matrix\n   * @return an *Array* representation of the matrix\n   */\n  toFloat32Array(t) {\n    return Float32Array.from(x(this, t));\n  }\n  /**\n   * Returns a *Float64Array* containing elements which comprise the matrix.\n   * The method can return either the 16 elements or the 6 elements\n   * depending on the value of the `is2D` parameter.\n   *\n   * @param is2D *Array* representation of the matrix\n   * @return an *Array* representation of the matrix\n   */\n  toFloat64Array(t) {\n    return Float64Array.from(x(this, t));\n  }\n  /**\n   * Creates and returns a string representation of the matrix in `CSS` matrix syntax,\n   * using the appropriate `CSS` matrix notation.\n   *\n   * matrix3d *matrix3d(m11, m12, m13, m14, m21, ...)*\n   * matrix *matrix(a, b, c, d, e, f)*\n   *\n   * @return a string representation of the matrix\n   */\n  toString() {\n    const { is2D: t } = this, e = this.toFloat64Array(t).join(\", \");\n    return `${t ? \"matrix\" : \"matrix3d\"}(${e})`;\n  }\n  /**\n   * Returns a JSON representation of the `CSSMatrix` instance, a standard *Object*\n   * that includes `{a,b,c,d,e,f}` and `{m11,m12,m13,..m44}` properties as well\n   * as the `is2D` & `isIdentity` properties.\n   *\n   * The result can also be used as a second parameter for the `fromMatrix` static method\n   * to load values into another matrix instance.\n   *\n   * @return an *Object* with all matrix values.\n   */\n  toJSON() {\n    const { is2D: t, isIdentity: e } = this;\n    return { ...this, is2D: t, isIdentity: e };\n  }\n  /**\n   * The Multiply method returns a new CSSMatrix which is the result of this\n   * matrix multiplied by the passed matrix, with the passed matrix to the right.\n   * This matrix is not modified.\n   *\n   * @param m2 CSSMatrix\n   * @return The resulted matrix.\n   */\n  multiply(t) {\n    return N(this, t);\n  }\n  /**\n   * The translate method returns a new matrix which is this matrix post\n   * multiplied by a translation matrix containing the passed values. If the z\n   * component is undefined, a 0 value is used in its place. This matrix is not\n   * modified.\n   *\n   * @param x X component of the translation value.\n   * @param y Y component of the translation value.\n   * @param z Z component of the translation value.\n   * @return The resulted matrix\n   */\n  translate(t, e, n) {\n    const i = t;\n    let r = e, a = n;\n    return typeof r > \"u\" && (r = 0), typeof a > \"u\" && (a = 0), N(this, Y(i, r, a));\n  }\n  /**\n   * The scale method returns a new matrix which is this matrix post multiplied by\n   * a scale matrix containing the passed values. If the z component is undefined,\n   * a 1 value is used in its place. If the y component is undefined, the x\n   * component value is used in its place. This matrix is not modified.\n   *\n   * @param x The X component of the scale value.\n   * @param y The Y component of the scale value.\n   * @param z The Z component of the scale value.\n   * @return The resulted matrix\n   */\n  scale(t, e, n) {\n    const i = t;\n    let r = e, a = n;\n    return typeof r > \"u\" && (r = t), typeof a > \"u\" && (a = 1), N(this, I(i, r, a));\n  }\n  /**\n   * The rotate method returns a new matrix which is this matrix post multiplied\n   * by each of 3 rotation matrices about the major axes, first X, then Y, then Z.\n   * If the y and z components are undefined, the x value is used to rotate the\n   * object about the z axis, as though the vector (0,0,x) were passed. All\n   * rotation values are in degrees. This matrix is not modified.\n   *\n   * @param rx The X component of the rotation, or Z if Y and Z are null.\n   * @param ry The (optional) Y component of the rotation value.\n   * @param rz The (optional) Z component of the rotation value.\n   * @return The resulted matrix\n   */\n  rotate(t, e, n) {\n    let i = t, r = e || 0, a = n || 0;\n    return typeof t == \"number\" && typeof e > \"u\" && typeof n > \"u\" && (a = i, i = 0, r = 0), N(this, F(i, r, a));\n  }\n  /**\n   * The rotateAxisAngle method returns a new matrix which is this matrix post\n   * multiplied by a rotation matrix with the given axis and `angle`. The right-hand\n   * rule is used to determine the direction of rotation. All rotation values are\n   * in degrees. This matrix is not modified.\n   *\n   * @param x The X component of the axis vector.\n   * @param y The Y component of the axis vector.\n   * @param z The Z component of the axis vector.\n   * @param angle The angle of rotation about the axis vector, in degrees.\n   * @return The resulted matrix\n   */\n  rotateAxisAngle(t, e, n, i) {\n    if ([t, e, n, i].some((r) => Number.isNaN(+r)))\n      throw new TypeError(\"CSSMatrix: expecting 4 values\");\n    return N(this, T(t, e, n, i));\n  }\n  /**\n   * Specifies a skew transformation along the `x-axis` by the given angle.\n   * This matrix is not modified.\n   *\n   * @param angle The angle amount in degrees to skew.\n   * @return The resulted matrix\n   */\n  skewX(t) {\n    return N(this, R(t));\n  }\n  /**\n   * Specifies a skew transformation along the `y-axis` by the given angle.\n   * This matrix is not modified.\n   *\n   * @param angle The angle amount in degrees to skew.\n   * @return The resulted matrix\n   */\n  skewY(t) {\n    return N(this, D(t));\n  }\n  /**\n   * Specifies a skew transformation along both the `x-axis` and `y-axis`.\n   * This matrix is not modified.\n   *\n   * @param angleX The X-angle amount in degrees to skew.\n   * @param angleY The angle amount in degrees to skew.\n   * @return The resulted matrix\n   */\n  skew(t, e) {\n    return N(this, v(t, e));\n  }\n  /**\n   * Transforms a specified vector using the matrix, returning a new\n   * {x,y,z,w} Tuple *Object* comprising the transformed vector.\n   * Neither the matrix nor the original vector are altered.\n   *\n   * The method is equivalent with `transformPoint()` method\n   * of the `DOMMatrix` constructor.\n   *\n   * @param t Tuple with `{x,y,z,w}` components\n   * @return the resulting Tuple\n   */\n  transformPoint(t) {\n    const e = this.m11 * t.x + this.m21 * t.y + this.m31 * t.z + this.m41 * t.w, n = this.m12 * t.x + this.m22 * t.y + this.m32 * t.z + this.m42 * t.w, i = this.m13 * t.x + this.m23 * t.y + this.m33 * t.z + this.m43 * t.w, r = this.m14 * t.x + this.m24 * t.y + this.m34 * t.z + this.m44 * t.w;\n    return t instanceof DOMPoint ? new DOMPoint(e, n, i, r) : {\n      x: e,\n      y: n,\n      z: i,\n      w: r\n    };\n  }\n}\np(y, \"Translate\", Y), p(y, \"Rotate\", F), p(y, \"RotateAxisAngle\", T), p(y, \"Scale\", I), p(y, \"SkewX\", R), p(y, \"SkewY\", D), p(y, \"Skew\", v), p(y, \"Multiply\", N), p(y, \"fromArray\", g), p(y, \"fromMatrix\", X), p(y, \"fromString\", O), p(y, \"toArray\", x), p(y, \"isCompatibleArray\", E), p(y, \"isCompatibleObject\", P);\nexport {\n  y as default\n};\n//# sourceMappingURL=dommatrix.mjs.map\n","import type { AbsoluteArray } from '../types';\nimport isPathArray from './isPathArray';\n\n/**\n * Iterates an array to check if it's a `pathArray`\n * with all absolute values.\n *\n * @param path the `pathArray` to be checked\n * @returns iteration result\n */\nconst isAbsoluteArray = (path: unknown): path is AbsoluteArray => {\n  return (\n    isPathArray(path) &&\n    // `isPathArray` also checks if it's `Array`\n    path.every(([x]) => x === x.toUpperCase())\n  );\n};\nexport default isAbsoluteArray;\n","import parsePathString from '../parser/parsePathString';\nimport isAbsoluteArray from '../util/isAbsoluteArray';\nimport type {\n  PathArray,\n  AbsoluteArray,\n  AbsoluteCommand,\n  AbsoluteSegment,\n  VSegment,\n  HSegment,\n  QSegment,\n  TSegment,\n  ASegment,\n  SSegment,\n  CSegment,\n  MSegment,\n} from '../types';\n\n/**\n * Parses a path string value or object and returns an array\n * of segments, all converted to absolute values.\n *\n * @param pathInput the path string | object\n * @returns the resulted `pathArray` with absolute values\n */\nconst pathToAbsolute = (pathInput: string | PathArray): AbsoluteArray => {\n  /* istanbul ignore else */\n  if (isAbsoluteArray(pathInput)) {\n    return [...pathInput];\n  }\n\n  const path = parsePathString(pathInput);\n  let x = 0;\n  let y = 0;\n  let mx = 0;\n  let my = 0;\n\n  // the `absoluteSegment[]` is for sure an `absolutePath`\n  return path.map(segment => {\n    const values = segment.slice(1).map(Number);\n    const [pathCommand] = segment;\n    const absCommand = pathCommand.toUpperCase() as AbsoluteCommand;\n\n    if (pathCommand === 'M') {\n      [x, y] = values;\n      mx = x;\n      my = y;\n      return ['M', x, y] as MSegment;\n    }\n\n    let absoluteSegment = [] as unknown as AbsoluteSegment;\n\n    if (pathCommand !== absCommand) {\n      if (absCommand === 'A') {\n        absoluteSegment = [\n          absCommand,\n          values[0],\n          values[1],\n          values[2],\n          values[3],\n          values[4],\n          values[5] + x,\n          values[6] + y,\n        ] as ASegment;\n      } else if (absCommand === 'V') {\n        absoluteSegment = [absCommand, values[0] + y] as VSegment;\n      } else if (absCommand === 'H') {\n        absoluteSegment = [absCommand, values[0] + x] as HSegment;\n      } else {\n        // use brakets for `eslint: no-case-declaration`\n        // https://stackoverflow.com/a/50753272/803358\n        const absValues = values.map((n, j) => n + (j % 2 ? y : x));\n        // for n, l, c, s, q, t\n        absoluteSegment = [absCommand, ...absValues] as QSegment | TSegment | SSegment | CSegment;\n      }\n    } else {\n      absoluteSegment = [absCommand, ...values] as typeof segment;\n    }\n\n    // const segLength = absoluteSegment.length;\n    if (absCommand === 'Z') {\n      x = mx;\n      y = my;\n    } else if (absCommand === 'H') {\n      [, x] = absoluteSegment as HSegment;\n    } else if (absCommand === 'V') {\n      [, y] = absoluteSegment as VSegment;\n    } else {\n      // x = absoluteSegment[segLength - 2];\n      // y = absoluteSegment[segLength - 1];\n      [x, y] = absoluteSegment.slice(-2) as [number, number];\n\n      if (absCommand === 'M') {\n        mx = x;\n        my = y;\n      }\n    }\n\n    return absoluteSegment;\n  }) as AbsoluteArray;\n};\nexport default pathToAbsolute;\n","import type { ParserParams } from '../interface';\nimport type { NormalSegment, PathSegment } from '../types';\n\n/**\n * Normalizes a single segment of a `pathArray` object.\n *\n * @param segment the segment object\n * @param params the coordinates of the previous segment\n * @returns the normalized segment\n */\nconst normalizeSegment = (segment: PathSegment, params: ParserParams): NormalSegment => {\n  const [pathCommand] = segment;\n  const { x1: px1, y1: py1, x2: px2, y2: py2 } = params;\n  const values = segment.slice(1).map(Number);\n  let result = segment;\n\n  if (!'TQ'.includes(pathCommand)) {\n    // optional but good to be cautious\n    params.qx = null;\n    params.qy = null;\n  }\n\n  if (pathCommand === 'H') {\n    result = ['L', segment[1], py1];\n  } else if (pathCommand === 'V') {\n    result = ['L', px1, segment[1]];\n  } else if (pathCommand === 'S') {\n    const x1 = px1 * 2 - px2;\n    const y1 = py1 * 2 - py2;\n    params.x1 = x1;\n    params.y1 = y1;\n    result = ['C', x1, y1, ...(values as [number, number, number, number])];\n  } else if (pathCommand === 'T') {\n    const qx = px1 * 2 - (params.qx ? params.qx : /* istanbul ignore next */ 0);\n    const qy = py1 * 2 - (params.qy ? params.qy : /* istanbul ignore next */ 0);\n    params.qx = qx;\n    params.qy = qy;\n    result = ['Q', qx, qy, ...(values as [number, number])];\n  } else if (pathCommand === 'Q') {\n    const [nqx, nqy] = values as [number, number];\n    params.qx = nqx;\n    params.qy = nqy;\n  }\n\n  return result as NormalSegment;\n};\nexport default normalizeSegment;\n","import type { NormalArray } from '../types';\nimport isAbsoluteArray from './isAbsoluteArray';\n\n/**\n * Iterates an array to check if it's a `pathArray`\n * with all segments are in non-shorthand notation\n * with absolute values.\n *\n * @param {string | SVGPath.pathArray} path the `pathArray` to be checked\n * @returns {boolean} iteration result\n */\nconst isNormalizedArray = (path: unknown): path is NormalArray => {\n  // `isAbsoluteArray` also checks if it's `Array`\n  return isAbsoluteArray(path) && path.every(([pc]) => 'ACLMQZ'.includes(pc));\n};\nexport default isNormalizedArray;\n","import type { ParserParams } from '../interface';\n\nconst paramsParser: ParserParams = {\n  x1: 0,\n  y1: 0,\n  x2: 0,\n  y2: 0,\n  x: 0,\n  y: 0,\n  qx: null,\n  qy: null,\n};\n\nexport default paramsParser;\n","import pathToAbsolute from '../convert/pathToAbsolute';\nimport normalizeSegment from './normalizeSegment';\nimport isNormalizedArray from '../util/isNormalizedArray';\nimport paramsParser from '../parser/paramsParser';\nimport type { NormalArray, PathArray } from '../types';\n\n/**\n * Normalizes a `path` object for further processing:\n * * convert segments to absolute values\n * * convert shorthand path commands to their non-shorthand notation\n *\n * @param pathInput the string to be parsed or 'pathArray'\n * @returns the normalized `pathArray`\n */\nconst normalizePath = (pathInput: string | PathArray): NormalArray => {\n  if (isNormalizedArray(pathInput)) {\n    return [...pathInput];\n  }\n\n  const path = pathToAbsolute(pathInput);\n  const params = { ...paramsParser };\n  const allPathCommands = [];\n  const ii = path.length;\n  let pathCommand = '';\n\n  for (let i = 0; i < ii; i += 1) {\n    [pathCommand] = path[i];\n\n    // Save current path command\n    allPathCommands[i] = pathCommand;\n    path[i] = normalizeSegment(path[i], params);\n\n    const segment = path[i];\n    const seglen = segment.length;\n\n    params.x1 = +segment[seglen - 2];\n    params.y1 = +segment[seglen - 1];\n    params.x2 = +segment[seglen - 4] || params.x1;\n    params.y2 = +segment[seglen - 3] || params.y1;\n  }\n\n  return path as NormalArray;\n};\nexport default normalizePath;\n","/**\n * Returns the coordinates of a specified distance\n * ratio between two points.\n *\n * @param a the first point coordinates\n * @param b the second point coordinates\n * @param t the ratio\n * @returns the midpoint coordinates\n */\nconst midPoint = (a: [number, number], b: [number, number], t: number): [number, number] => {\n  const [ax, ay] = a;\n  const [bx, by] = b;\n  return [ax + (bx - ax) * t, ay + (by - ay) * t];\n};\n\nexport default midPoint;\n","import midPoint from '../math/midPoint';\nimport distanceSquareRoot from '../math/distanceSquareRoot';\nimport type { LengthFactory } from '../interface';\n\n/**\n * Returns a {x,y} point at a given length, the total length and\n * the minimum and maximum {x,y} coordinates of a line (L,V,H,Z) segment.\n *\n * @param x1 the starting point X\n * @param y1 the starting point Y\n * @param x2 the ending point X\n * @param y2 the ending point Y\n * @param distance the distance to point\n * @returns the segment length, point, min & max\n */\nconst segmentLineFactory = (x1: number, y1: number, x2: number, y2: number, distance?: number): LengthFactory => {\n  const length = distanceSquareRoot([x1, y1], [x2, y2]);\n  let point = { x: 0, y: 0 };\n\n  /* istanbul ignore else */\n  if (typeof distance === 'number') {\n    if (distance <= 0) {\n      point = { x: x1, y: y1 };\n    } else if (distance >= length) {\n      point = { x: x2, y: y2 };\n    } else {\n      const [x, y] = midPoint([x1, y1], [x2, y2], distance / length);\n      point = { x, y };\n    }\n  }\n\n  return {\n    length,\n    point,\n    min: {\n      x: Math.min(x1, x2),\n      y: Math.min(y1, y2),\n    },\n    max: {\n      x: Math.max(x1, x2),\n      y: Math.max(y1, y2),\n    },\n  };\n};\nexport default segmentLineFactory;\n","import type { LengthFactory } from '../interface';\nimport segmentLineFactory from './segmentLineFactory';\nimport distanceSquareRoot from '../math/distanceSquareRoot';\n\n/**\n * Returns an angle value between two points.\n *\n * @param v0\n * @param v1\n * @returns a number representing an angle\n */\nconst angleBetween = (v0: { x: number; y: number }, v1: { x: number; y: number }): number => {\n  const { x: v0x, y: v0y } = v0;\n  const { x: v1x, y: v1y } = v1;\n  const p = v0x * v1x + v0y * v1y;\n  const n = Math.sqrt((v0x ** 2 + v0y ** 2) * (v1x ** 2 + v1y ** 2));\n  const sign = v0x * v1y - v0y * v1x < 0 ? -1 : 1;\n  const angle = sign * Math.acos(p / n);\n\n  return angle;\n};\n\n/**\n * Returns a {x,y} point at a given length, the total length and\n * the minimum and maximum {x,y} coordinates of a C (cubic-bezier) segment.\n *\n * @see https://github.com/MadLittleMods/svg-curve-lib/blob/master/src/js/svg-curve-lib.js\n *\n * @param x1 the starting x position\n * @param y1 the starting y position\n * @param RX x-radius of the arc\n * @param RY y-radius of the arc\n * @param angle x-axis-rotation of the arc\n * @param LAF large-arc-flag of the arc\n * @param SF sweep-flag of the arc\n * @param x the ending x position\n * @param y the ending y position\n * @param t the point distance\n * @returns the requested point\n */\nconst getPointAtArcSegmentLength = (\n  x1: number,\n  y1: number,\n  RX: number,\n  RY: number,\n  angle: number,\n  LAF: number,\n  SF: number,\n  x: number,\n  y: number,\n  t: number,\n): { x: number; y: number } => {\n  const { abs, sin, cos, sqrt, PI } = Math;\n  let rx = abs(RX);\n  let ry = abs(RY);\n  const xRot = ((angle % 360) + 360) % 360;\n  const xRotRad = xRot * (PI / 180);\n\n  if (x1 === x && y1 === y) {\n    return { x: x1, y: y1 };\n  }\n\n  if (rx === 0 || ry === 0) {\n    return segmentLineFactory(x1, y1, x, y, t).point;\n  }\n\n  const dx = (x1 - x) / 2;\n  const dy = (y1 - y) / 2;\n\n  const transformedPoint = {\n    x: cos(xRotRad) * dx + sin(xRotRad) * dy,\n    y: -sin(xRotRad) * dx + cos(xRotRad) * dy,\n  };\n\n  const radiiCheck = transformedPoint.x ** 2 / rx ** 2 + transformedPoint.y ** 2 / ry ** 2;\n\n  if (radiiCheck > 1) {\n    rx *= sqrt(radiiCheck);\n    ry *= sqrt(radiiCheck);\n  }\n\n  const cSquareNumerator = rx ** 2 * ry ** 2 - rx ** 2 * transformedPoint.y ** 2 - ry ** 2 * transformedPoint.x ** 2;\n\n  const cSquareRootDenom = rx ** 2 * transformedPoint.y ** 2 + ry ** 2 * transformedPoint.x ** 2;\n\n  let cRadicand = cSquareNumerator / cSquareRootDenom;\n  cRadicand = cRadicand < 0 ? 0 : cRadicand;\n  const cCoef = (LAF !== SF ? 1 : -1) * sqrt(cRadicand);\n  const transformedCenter = {\n    x: cCoef * ((rx * transformedPoint.y) / ry),\n    y: cCoef * (-(ry * transformedPoint.x) / rx),\n  };\n\n  const center = {\n    x: cos(xRotRad) * transformedCenter.x - sin(xRotRad) * transformedCenter.y + (x1 + x) / 2,\n    y: sin(xRotRad) * transformedCenter.x + cos(xRotRad) * transformedCenter.y + (y1 + y) / 2,\n  };\n\n  const startVector = {\n    x: (transformedPoint.x - transformedCenter.x) / rx,\n    y: (transformedPoint.y - transformedCenter.y) / ry,\n  };\n\n  const startAngle = angleBetween({ x: 1, y: 0 }, startVector);\n\n  const endVector = {\n    x: (-transformedPoint.x - transformedCenter.x) / rx,\n    y: (-transformedPoint.y - transformedCenter.y) / ry,\n  };\n\n  let sweepAngle = angleBetween(startVector, endVector);\n  if (!SF && sweepAngle > 0) {\n    sweepAngle -= 2 * PI;\n  } else if (SF && sweepAngle < 0) {\n    sweepAngle += 2 * PI;\n  }\n  sweepAngle %= 2 * PI;\n\n  const alpha = startAngle + sweepAngle * t;\n  const ellipseComponentX = rx * cos(alpha);\n  const ellipseComponentY = ry * sin(alpha);\n\n  const point = {\n    x: cos(xRotRad) * ellipseComponentX - sin(xRotRad) * ellipseComponentY + center.x,\n    y: sin(xRotRad) * ellipseComponentX + cos(xRotRad) * ellipseComponentY + center.y,\n  };\n\n  // to be used later\n  // point.ellipticalArcStartAngle = startAngle;\n  // point.ellipticalArcEndAngle = startAngle + sweepAngle;\n  // point.ellipticalArcAngle = alpha;\n\n  // point.ellipticalArcCenter = center;\n  // point.resultantRx = rx;\n  // point.resultantRy = ry;\n\n  return point;\n};\n\n/**\n * Returns a {x,y} point at a given length, the total length and\n * the shape minimum and maximum {x,y} coordinates of an A (arc-to) segment.\n *\n * @param X1 the starting x position\n * @param Y1 the starting y position\n * @param RX x-radius of the arc\n * @param RY y-radius of the arc\n * @param angle x-axis-rotation of the arc\n * @param LAF large-arc-flag of the arc\n * @param SF sweep-flag of the arc\n * @param X2 the ending x position\n * @param Y2 the ending y position\n * @param distance the point distance\n * @returns the segment length, point, min & max\n */\nconst segmentArcFactory = (\n  X1: number,\n  Y1: number,\n  RX: number,\n  RY: number,\n  angle: number,\n  LAF: number,\n  SF: number,\n  X2: number,\n  Y2: number,\n  distance: number,\n): LengthFactory => {\n  const distanceIsNumber = typeof distance === 'number';\n  let x = X1;\n  let y = Y1;\n  let LENGTH = 0;\n  let prev = [x, y, LENGTH];\n  let cur = [x, y] as [number, number];\n  let t = 0;\n  let POINT = { x: 0, y: 0 };\n  let POINTS = [{ x, y }];\n\n  if (distanceIsNumber && distance <= 0) {\n    POINT = { x, y };\n  }\n\n  const sampleSize = 300;\n  for (let j = 0; j <= sampleSize; j += 1) {\n    t = j / sampleSize;\n\n    ({ x, y } = getPointAtArcSegmentLength(X1, Y1, RX, RY, angle, LAF, SF, X2, Y2, t));\n    POINTS = [...POINTS, { x, y }];\n    LENGTH += distanceSquareRoot(cur, [x, y]);\n    cur = [x, y];\n\n    if (distanceIsNumber && LENGTH > distance && distance > prev[2]) {\n      const dv = (LENGTH - distance) / (LENGTH - prev[2]);\n\n      POINT = {\n        x: cur[0] * (1 - dv) + prev[0] * dv,\n        y: cur[1] * (1 - dv) + prev[1] * dv,\n      };\n    }\n    prev = [x, y, LENGTH];\n  }\n\n  if (distanceIsNumber && distance >= LENGTH) {\n    POINT = { x: X2, y: Y2 };\n  }\n\n  return {\n    length: LENGTH,\n    point: POINT,\n    min: {\n      x: Math.min(...POINTS.map(n => n.x)),\n      y: Math.min(...POINTS.map(n => n.y)),\n    },\n    max: {\n      x: Math.max(...POINTS.map(n => n.x)),\n      y: Math.max(...POINTS.map(n => n.y)),\n    },\n  };\n};\nexport default segmentArcFactory;\n","import { LengthFactory } from 'src/interface';\nimport distanceSquareRoot from '../math/distanceSquareRoot';\n\n/**\n * Returns a {x,y} point at a given length, the total length and\n * the minimum and maximum {x,y} coordinates of a C (cubic-bezier) segment.\n *\n * @param x1 the starting point X\n * @param y1 the starting point Y\n * @param c1x the first control point X\n * @param c1y the first control point Y\n * @param c2x the second control point X\n * @param c2y the second control point Y\n * @param x2 the ending point X\n * @param y2 the ending point Y\n * @param t a [0-1] ratio\n * @returns the point at cubic-bezier segment length\n */\nconst getPointAtCubicSegmentLength = (\n  x1: number,\n  y1: number,\n  c1x: number,\n  c1y: number,\n  c2x: number,\n  c2y: number,\n  x2: number,\n  y2: number,\n  t: number,\n): { x: number; y: number } => {\n  const t1 = 1 - t;\n  return {\n    x: t1 ** 3 * x1 + 3 * t1 ** 2 * t * c1x + 3 * t1 * t ** 2 * c2x + t ** 3 * x2,\n    y: t1 ** 3 * y1 + 3 * t1 ** 2 * t * c1y + 3 * t1 * t ** 2 * c2y + t ** 3 * y2,\n  };\n};\n\n/**\n * Returns the length of a C (cubic-bezier) segment\n * or an {x,y} point at a given length.\n *\n * @param x1 the starting point X\n * @param y1 the starting point Y\n * @param c1x the first control point X\n * @param c1y the first control point Y\n * @param c2x the second control point X\n * @param c2y the second control point Y\n * @param x2 the ending point X\n * @param y2 the ending point Y\n * @param distance the point distance\n * @returns the segment length, point, min & max\n */\nconst segmentCubicFactory = (\n  x1: number,\n  y1: number,\n  c1x: number,\n  c1y: number,\n  c2x: number,\n  c2y: number,\n  x2: number,\n  y2: number,\n  distance?: number,\n): LengthFactory => {\n  const distanceIsNumber = typeof distance === 'number';\n  let x = x1;\n  let y = y1;\n  let LENGTH = 0;\n  let prev = [x, y, LENGTH];\n  let cur = [x, y] as [number, number];\n  let t = 0;\n  let POINT = { x: 0, y: 0 };\n  let POINTS = [{ x, y }];\n\n  if (distanceIsNumber && distance <= 0) {\n    POINT = { x, y };\n  }\n\n  const sampleSize = 300;\n  for (let j = 0; j <= sampleSize; j += 1) {\n    t = j / sampleSize;\n\n    ({ x, y } = getPointAtCubicSegmentLength(x1, y1, c1x, c1y, c2x, c2y, x2, y2, t));\n    POINTS = [...POINTS, { x, y }];\n    LENGTH += distanceSquareRoot(cur, [x, y]);\n    cur = [x, y];\n\n    if (distanceIsNumber && LENGTH > distance && distance > prev[2]) {\n      const dv = (LENGTH - distance) / (LENGTH - prev[2]);\n\n      POINT = {\n        x: cur[0] * (1 - dv) + prev[0] * dv,\n        y: cur[1] * (1 - dv) + prev[1] * dv,\n      };\n    }\n    prev = [x, y, LENGTH];\n  }\n\n  if (distanceIsNumber && distance >= LENGTH) {\n    POINT = { x: x2, y: y2 };\n  }\n\n  return {\n    length: LENGTH,\n    point: POINT,\n    min: {\n      x: Math.min(...POINTS.map(n => n.x)),\n      y: Math.min(...POINTS.map(n => n.y)),\n    },\n    max: {\n      x: Math.max(...POINTS.map(n => n.x)),\n      y: Math.max(...POINTS.map(n => n.y)),\n    },\n  };\n};\nexport default segmentCubicFactory;\n","import { LengthFactory } from 'src/interface';\nimport distanceSquareRoot from '../math/distanceSquareRoot';\n\n/**\n * Returns the {x,y} coordinates of a point at a\n * given length of a quadratic-bezier segment.\n *\n * @see https://github.com/substack/point-at-length\n *\n * @param x1 the starting point X\n * @param y1 the starting point Y\n * @param cx the control point X\n * @param cy the control point Y\n * @param x2 the ending point X\n * @param y2 the ending point Y\n * @param t a [0-1] ratio\n * @returns the requested {x,y} coordinates\n */\nconst getPointAtQuadSegmentLength = (\n  x1: number,\n  y1: number,\n  cx: number,\n  cy: number,\n  x2: number,\n  y2: number,\n  t: number,\n): { x: number; y: number } => {\n  const t1 = 1 - t;\n  return {\n    x: t1 ** 2 * x1 + 2 * t1 * t * cx + t ** 2 * x2,\n    y: t1 ** 2 * y1 + 2 * t1 * t * cy + t ** 2 * y2,\n  };\n};\n\n/**\n * Returns a {x,y} point at a given length, the total length and\n * the minimum and maximum {x,y} coordinates of a Q (quadratic-bezier) segment.\n *\n * @param x1 the starting point X\n * @param y1 the starting point Y\n * @param qx the control point X\n * @param qy the control point Y\n * @param x2 the ending point X\n * @param y2 the ending point Y\n * @param distance the distance to point\n * @returns the segment length, point, min & max\n */\nconst segmentQuadFactory = (\n  x1: number,\n  y1: number,\n  qx: number,\n  qy: number,\n  x2: number,\n  y2: number,\n  distance?: number,\n): LengthFactory => {\n  const distanceIsNumber = typeof distance === 'number';\n  let x = x1;\n  let y = y1;\n  let LENGTH = 0;\n  let prev = [x, y, LENGTH];\n  let cur = [x, y] as [number, number];\n  let t = 0;\n  let POINT = { x: 0, y: 0 };\n  let POINTS = [{ x, y }];\n\n  if (distanceIsNumber && distance <= 0) {\n    POINT = { x, y };\n  }\n\n  const sampleSize = 300;\n  for (let j = 0; j <= sampleSize; j += 1) {\n    t = j / sampleSize;\n\n    ({ x, y } = getPointAtQuadSegmentLength(x1, y1, qx, qy, x2, y2, t));\n    POINTS = [...POINTS, { x, y }];\n    LENGTH += distanceSquareRoot(cur, [x, y]);\n    cur = [x, y];\n\n    if (distanceIsNumber && LENGTH > distance && distance > prev[2]) {\n      const dv = (LENGTH - distance) / (LENGTH - prev[2]);\n\n      POINT = {\n        x: cur[0] * (1 - dv) + prev[0] * dv,\n        y: cur[1] * (1 - dv) + prev[1] * dv,\n      };\n    }\n    prev = [x, y, LENGTH];\n  }\n\n  /* istanbul ignore else */\n  if (distanceIsNumber && distance >= LENGTH) {\n    POINT = { x: x2, y: y2 };\n  }\n\n  return {\n    length: LENGTH,\n    point: POINT,\n    min: {\n      x: Math.min(...POINTS.map(n => n.x)),\n      y: Math.min(...POINTS.map(n => n.y)),\n    },\n    max: {\n      x: Math.max(...POINTS.map(n => n.x)),\n      y: Math.max(...POINTS.map(n => n.y)),\n    },\n  };\n};\nexport default segmentQuadFactory;\n","import type { MSegment, PathArray } from '../types';\nimport type { LengthFactory } from '../interface';\nimport normalizePath from '../process/normalizePath';\nimport segmentLineFactory from './segmentLineFactory';\nimport segmentArcFactory from './segmentArcFactory';\nimport segmentCubicFactory from './segmentCubicFactory';\nimport segmentQuadFactory from './segmentQuadFactory';\n\n/**\n * Returns a {x,y} point at a given length\n * of a shape, the shape total length and\n * the shape minimum and maximum {x,y} coordinates.\n *\n * @param pathInput the `pathArray` to look into\n * @param distance the length of the shape to look at\n * @returns the path length, point, min & max\n */\nconst pathLengthFactory = (pathInput: string | PathArray, distance?: number): LengthFactory => {\n  const path = normalizePath(pathInput);\n  const distanceIsNumber = typeof distance === 'number';\n  let isM;\n  let data = [] as number[];\n  let pathCommand;\n  let x = 0;\n  let y = 0;\n  let mx = 0;\n  let my = 0;\n  let seg;\n  let MIN = [] as { x: number; y: number }[];\n  let MAX = [] as { x: number; y: number }[];\n  let length = 0;\n  let min = { x: 0, y: 0 };\n  let max = min;\n  let point = min;\n  let POINT = min;\n  let LENGTH = 0;\n\n  for (let i = 0, ll = path.length; i < ll; i += 1) {\n    seg = path[i];\n    [pathCommand] = seg;\n    isM = pathCommand === 'M';\n    data = !isM ? [x, y, ...(seg.slice(1) as number[])] : data;\n\n    // this segment is always ZERO\n    /* istanbul ignore else */\n    if (isM) {\n      // remember mx, my for Z\n      [, mx, my] = seg as MSegment;\n      min = { x: mx, y: my };\n      max = min;\n      length = 0;\n\n      if (distanceIsNumber && distance < 0.001) {\n        POINT = min;\n      }\n    } else if (pathCommand === 'L') {\n      ({ length, min, max, point } = segmentLineFactory(\n        ...(data as [number, number, number, number]),\n        (distance || 0) - LENGTH,\n      ));\n    } else if (pathCommand === 'A') {\n      ({ length, min, max, point } = segmentArcFactory(\n        ...(data as [number, number, number, number, number, number, number, number, number]),\n        (distance || 0) - LENGTH,\n      ));\n    } else if (pathCommand === 'C') {\n      ({ length, min, max, point } = segmentCubicFactory(\n        ...(data as [number, number, number, number, number, number, number]),\n        (distance || 0) - LENGTH,\n      ));\n    } else if (pathCommand === 'Q') {\n      ({ length, min, max, point } = segmentQuadFactory(\n        ...(data as [number, number, number, number, number, number]),\n        (distance || 0) - LENGTH,\n      ));\n    } else if (pathCommand === 'Z') {\n      data = [x, y, mx, my];\n      ({ length, min, max, point } = segmentLineFactory(\n        ...(data as [number, number, number, number]),\n        (distance || 0) - LENGTH,\n      ));\n    }\n\n    if (distanceIsNumber && LENGTH < distance && LENGTH + length >= distance) {\n      POINT = point;\n    }\n\n    MAX = [...MAX, max];\n    MIN = [...MIN, min];\n    LENGTH += length;\n\n    [x, y] = pathCommand !== 'Z' ? (seg.slice(-2) as [number, number]) : [mx, my];\n  }\n\n  // native `getPointAtLength` behavior when the given distance\n  // is higher than total length\n  if (distanceIsNumber && distance >= LENGTH) {\n    POINT = { x, y };\n  }\n\n  return {\n    length: LENGTH,\n    point: POINT,\n    min: {\n      x: Math.min(...MIN.map(n => n.x)),\n      y: Math.min(...MIN.map(n => n.y)),\n    },\n    max: {\n      x: Math.max(...MAX.map(n => n.x)),\n      y: Math.max(...MAX.map(n => n.y)),\n    },\n  };\n};\nexport default pathLengthFactory;\n","import { PathBBox } from 'src/interface';\nimport { PathArray } from 'src/types';\nimport pathLengthFactory from './pathLengthFactory';\n\n/**\n * Returns the bounding box of a shape.\n *\n * @param path the shape `pathArray`\n * @returns the length of the cubic-bezier segment\n */\nconst getPathBBox = (path?: PathArray | string): PathBBox => {\n  if (!path) {\n    return {\n      x: 0,\n      y: 0,\n      width: 0,\n      height: 0,\n      x2: 0,\n      y2: 0,\n      cx: 0,\n      cy: 0,\n      cz: 0,\n    };\n  }\n\n  const {\n    min: { x: xMin, y: yMin },\n    max: { x: xMax, y: yMax },\n  } = pathLengthFactory(path);\n\n  const width = xMax - xMin;\n  const height = yMax - yMin;\n\n  return {\n    width,\n    height,\n    x: xMin,\n    y: yMin,\n    x2: xMax,\n    y2: yMax,\n    cx: xMin + width / 2,\n    cy: yMin + height / 2,\n    // an estimted guess\n    cz: Math.max(width, height) + Math.min(width, height) / 2,\n  };\n};\nexport default getPathBBox;\n","import { CSegment, PathArray, PathCommand } from '../types';\n\n/**\n * Splits an extended A (arc-to) segment into two cubic-bezier segments.\n *\n * @param path the `pathArray` this segment belongs to\n * @param allPathCommands all previous path commands\n * @param i the segment index\n */\nconst fixArc = (path: PathArray, allPathCommands: PathCommand[], i: number) => {\n  if (path[i].length > 7) {\n    path[i].shift();\n    const segment = path[i];\n    let ni = i; // ESLint\n    while (segment.length) {\n      // if created multiple C:s, their original seg is saved\n      allPathCommands[i] = 'A';\n      path.splice((ni += 1), 0, ['C', ...segment.splice(0, 6)] as CSegment);\n    }\n    path.splice(i, 1);\n  }\n};\nexport default fixArc;\n","import { CurveArray } from '../types';\nimport isNormalizedArray from './isNormalizedArray';\n\n/**\n * Iterates an array to check if it's a `pathArray`\n * with all C (cubic bezier) segments.\n *\n * @param path the `Array` to be checked\n * @returns iteration result\n */\nconst isCurveArray = (path: unknown): path is CurveArray => {\n  // `isPathArray` also checks if it's `Array`\n  return isNormalizedArray(path) && path.every(([pc]) => 'MC'.includes(pc));\n};\nexport default isCurveArray;\n","/**\n * Returns an {x,y} vector rotated by a given\n * angle in radian.\n *\n * @param x the initial vector x\n * @param y the initial vector y\n * @param rad the radian vector angle\n * @returns the rotated vector\n */\nconst rotateVector = (x: number, y: number, rad: number): { x: number; y: number } => {\n  const X = x * Math.cos(rad) - y * Math.sin(rad);\n  const Y = x * Math.sin(rad) + y * Math.cos(rad);\n  return { x: X, y: Y };\n};\n\nexport default rotateVector;\n","import rotateVector from '../math/rotateVector';\n\n/**\n * Converts A (arc-to) segments to C (cubic-bezier-to).\n *\n * For more information of where this math came from visit:\n * http://www.w3.org/TR/SVG11/implnote.html#ArcImplementationNotes\n *\n * @param X1 the starting x position\n * @param Y1 the starting y position\n * @param RX x-radius of the arc\n * @param RY y-radius of the arc\n * @param angle x-axis-rotation of the arc\n * @param LAF large-arc-flag of the arc\n * @param SF sweep-flag of the arc\n * @param X2 the ending x position\n * @param Y2 the ending y position\n * @param recursive the parameters needed to split arc into 2 segments\n * @return the resulting cubic-bezier segment(s)\n */\nconst arcToCubic = (\n  X1: number,\n  Y1: number,\n  RX: number,\n  RY: number,\n  angle: number,\n  LAF: number,\n  SF: number,\n  X2: number,\n  Y2: number,\n  recursive?: [number, number, number, number],\n): number[] => {\n  let x1 = X1;\n  let y1 = Y1;\n  let rx = RX;\n  let ry = RY;\n  let x2 = X2;\n  let y2 = Y2;\n  // for more information of where this Math came from visit:\n  // http://www.w3.org/TR/SVG11/implnote.html#ArcImplementationNotes\n  const d120 = (Math.PI * 120) / 180;\n\n  const rad = (Math.PI / 180) * (+angle || 0);\n  let res = [] as number[];\n  let xy;\n  let f1;\n  let f2;\n  let cx;\n  let cy;\n\n  if (!recursive) {\n    xy = rotateVector(x1, y1, -rad);\n    x1 = xy.x;\n    y1 = xy.y;\n    xy = rotateVector(x2, y2, -rad);\n    x2 = xy.x;\n    y2 = xy.y;\n\n    const x = (x1 - x2) / 2;\n    const y = (y1 - y2) / 2;\n    let h = (x * x) / (rx * rx) + (y * y) / (ry * ry);\n    if (h > 1) {\n      h = Math.sqrt(h);\n      rx *= h;\n      ry *= h;\n    }\n    const rx2 = rx * rx;\n    const ry2 = ry * ry;\n\n    const k =\n      (LAF === SF ? -1 : 1) *\n      Math.sqrt(Math.abs((rx2 * ry2 - rx2 * y * y - ry2 * x * x) / (rx2 * y * y + ry2 * x * x)));\n\n    cx = (k * rx * y) / ry + (x1 + x2) / 2;\n    cy = (k * -ry * x) / rx + (y1 + y2) / 2;\n    // eslint-disable-next-line no-bitwise -- Impossible to satisfy no-bitwise\n    f1 = Math.asin(((((y1 - cy) / ry) * 10 ** 9) >> 0) / 10 ** 9);\n    // eslint-disable-next-line no-bitwise -- Impossible to satisfy no-bitwise\n    f2 = Math.asin(((((y2 - cy) / ry) * 10 ** 9) >> 0) / 10 ** 9);\n\n    f1 = x1 < cx ? Math.PI - f1 : f1;\n    f2 = x2 < cx ? Math.PI - f2 : f2;\n    if (f1 < 0) f1 = Math.PI * 2 + f1;\n    if (f2 < 0) f2 = Math.PI * 2 + f2;\n    if (SF && f1 > f2) {\n      f1 -= Math.PI * 2;\n    }\n    if (!SF && f2 > f1) {\n      f2 -= Math.PI * 2;\n    }\n  } else {\n    [f1, f2, cx, cy] = recursive;\n  }\n  let df = f2 - f1;\n  if (Math.abs(df) > d120) {\n    const f2old = f2;\n    const x2old = x2;\n    const y2old = y2;\n    f2 = f1 + d120 * (SF && f2 > f1 ? 1 : -1);\n    x2 = cx + rx * Math.cos(f2);\n    y2 = cy + ry * Math.sin(f2);\n    res = arcToCubic(x2, y2, rx, ry, angle, 0, SF, x2old, y2old, [f2, f2old, cx, cy]);\n  }\n  df = f2 - f1;\n  const c1 = Math.cos(f1);\n  const s1 = Math.sin(f1);\n  const c2 = Math.cos(f2);\n  const s2 = Math.sin(f2);\n  const t = Math.tan(df / 4);\n  const hx = (4 / 3) * rx * t;\n  const hy = (4 / 3) * ry * t;\n  const m1 = [x1, y1];\n  const m2 = [x1 + hx * s1, y1 - hy * c1];\n  const m3 = [x2 + hx * s2, y2 - hy * c2];\n  const m4 = [x2, y2];\n  m2[0] = 2 * m1[0] - m2[0];\n  m2[1] = 2 * m1[1] - m2[1];\n  if (recursive) {\n    return [...m2, ...m3, ...m4, ...res];\n  }\n  res = [...m2, ...m3, ...m4, ...res];\n  const newres = [];\n  for (let i = 0, ii = res.length; i < ii; i += 1) {\n    newres[i] = i % 2 ? rotateVector(res[i - 1], res[i], rad).y : rotateVector(res[i], res[i + 1], rad).x;\n  }\n  return newres;\n};\nexport default arcToCubic;\n","/**\n * Converts a Q (quadratic-bezier) segment to C (cubic-bezier).\n *\n * @param x1 curve start x\n * @param y1 curve start y\n * @param qx control point x\n * @param qy control point y\n * @param x2 curve end x\n * @param y2 curve end y\n * @returns the cubic-bezier segment\n */\nconst quadToCubic = (\n  x1: number,\n  y1: number,\n  qx: number,\n  qy: number,\n  x2: number,\n  y2: number,\n): [number, number, number, number, number, number] => {\n  const r13 = 1 / 3;\n  const r23 = 2 / 3;\n  return [\n    r13 * x1 + r23 * qx, // cpx1\n    r13 * y1 + r23 * qy, // cpy1\n    r13 * x2 + r23 * qx, // cpx2\n    r13 * y2 + r23 * qy, // cpy2\n    x2,\n    y2, // x,y\n  ];\n};\nexport default quadToCubic;\n","import midPoint from '../math/midPoint';\n\n/**\n * Converts an L (line-to) segment to C (cubic-bezier).\n *\n * @param x1 line start x\n * @param y1 line start y\n * @param x2 line end x\n * @param y2 line end y\n * @returns the cubic-bezier segment\n */\nconst lineToCubic = (x1: number, y1: number, x2: number, y2: number) => {\n  const t = 0.5;\n  const mid = midPoint([x1, y1], [x2, y2], t);\n  return [...mid, x2, y2, x2, y2];\n};\nexport default lineToCubic;\n","import arcToCubic from './arcToCubic';\nimport quadToCubic from './quadToCubic';\nimport lineToCubic from './lineToCubic';\nimport type { CSegment, MSegment, PathSegment } from '../types';\nimport type { ParserParams } from '../interface';\n\n/**\n * Converts any segment to C (cubic-bezier).\n *\n * @param segment the source segment\n * @param params the source segment parameters\n * @returns the cubic-bezier segment\n */\nconst segmentToCubic = (segment: PathSegment, params: ParserParams): MSegment | CSegment => {\n  const [pathCommand] = segment;\n  const values = segment.slice(1).map(Number);\n  const [x, y] = values;\n  let args;\n  const { x1: px1, y1: py1, x: px, y: py } = params;\n\n  if (!'TQ'.includes(pathCommand)) {\n    params.qx = null;\n    params.qy = null;\n  }\n\n  if (pathCommand === 'M') {\n    params.x = x;\n    params.y = y;\n    return segment;\n  } else if (pathCommand === 'A') {\n    args = [px1, py1, ...values] as [number, number, number, number, number, number, number, number, number];\n    return ['C', ...arcToCubic(...args)] as CSegment;\n  } else if (pathCommand === 'Q') {\n    params.qx = x;\n    params.qy = y;\n    args = [px1, py1, ...values] as [number, number, number, number, number, number];\n    return ['C', ...quadToCubic(...args)] as CSegment;\n  } else if (pathCommand === 'L') {\n    return ['C', ...lineToCubic(px1, py1, x, y)] as CSegment;\n  } else if (pathCommand === 'Z') {\n    return ['C', ...lineToCubic(px1, py1, px, py)] as CSegment;\n  }\n\n  return segment as MSegment | CSegment;\n};\nexport default segmentToCubic;\n","import fixArc from '../process/fixArc';\nimport isCurveArray from '../util/isCurveArray';\nimport normalizePath from '../process/normalizePath';\nimport segmentToCubic from '../process/segmentToCubic';\nimport paramsParser from '../parser/paramsParser';\nimport { CurveArray, PathArray, PathCommand } from '../types';\n\n/**\n * Parses a path string value or 'pathArray' and returns a new one\n * in which all segments are converted to cubic-bezier.\n *\n * In addition, un-necessary `Z` segment is removed if previous segment\n * extends to the `M` segment.\n *\n * @param pathInput the string to be parsed or 'pathArray'\n * @returns the resulted `pathArray` converted to cubic-bezier\n */\nconst pathToCurve = (pathInput: string | PathArray): CurveArray => {\n  /* istanbul ignore else */\n  if (isCurveArray(pathInput)) {\n    return [...pathInput];\n  }\n\n  const path = normalizePath(pathInput);\n  const params = { ...paramsParser };\n  const allPathCommands = [] as PathCommand[];\n  let pathCommand = ''; // ts-lint\n  let ii = path.length;\n\n  for (let i = 0; i < ii; i += 1) {\n    [pathCommand] = path[i];\n    allPathCommands[i] = pathCommand as PathCommand;\n\n    path[i] = segmentToCubic(path[i], params);\n\n    fixArc(path, allPathCommands, i);\n    ii = path.length;\n\n    const segment = path[i];\n    const seglen = segment.length;\n    params.x1 = +segment[seglen - 2];\n    params.y1 = +segment[seglen - 1];\n    params.x2 = +segment[seglen - 4] || params.x1;\n    params.y2 = +segment[seglen - 3] || params.y1;\n  }\n\n  return path as CurveArray;\n};\nexport default pathToCurve;\n","import pathToCurve from '../convert/pathToCurve';\nimport type { PathArray } from '../types';\n\n/**\n * Returns the area of a single cubic-bezier segment.\n *\n * http://objectmix.com/graphics/133553-area-closed-bezier-curve.html\n *\n * @param x1 the starting point X\n * @param y1 the starting point Y\n * @param c1x the first control point X\n * @param c1y the first control point Y\n * @param c2x the second control point X\n * @param c2y the second control point Y\n * @param x2 the ending point X\n * @param y2 the ending point Y\n * @returns the area of the cubic-bezier segment\n */\nconst getCubicSegArea = (\n  x1: number,\n  y1: number,\n  c1x: number,\n  c1y: number,\n  c2x: number,\n  c2y: number,\n  x2: number,\n  y2: number,\n) => {\n  return (\n    (3 *\n      ((y2 - y1) * (c1x + c2x) -\n        (x2 - x1) * (c1y + c2y) +\n        c1y * (x1 - c2x) -\n        c1x * (y1 - c2y) +\n        y2 * (c2x + x1 / 3) -\n        x2 * (c2y + y1 / 3))) /\n    20\n  );\n};\n\n/**\n * Returns the area of a shape.\n *\n * @author Jürg Lehni & Jonathan Puckey\n *\n * @see https://github.com/paperjs/paper.js/blob/develop/src/path/Path.js\n *\n * @param path the shape `pathArray`\n * @returns the length of the cubic-bezier segment\n */\nconst getPathArea = (path: PathArray) => {\n  let x = 0;\n  let y = 0;\n  let len = 0;\n\n  return pathToCurve(path)\n    .map(seg => {\n      switch (seg[0]) {\n        case 'M':\n          [, x, y] = seg;\n          return 0;\n        default:\n          len = getCubicSegArea(x, y, ...(seg.slice(1) as [number, number, number, number, number, number]));\n          [x, y] = seg.slice(-2) as [number, number];\n          return len;\n      }\n    })\n    .reduce((a, b) => a + b, 0);\n};\nexport default getPathArea;\n","import type { PathArray } from '../types';\nimport pathLengthFactory from './pathLengthFactory';\n\n/**\n * Returns the shape total length, or the equivalent to `shape.getTotalLength()`.\n *\n * The `normalizePath` version is lighter, faster, more efficient and more accurate\n * with paths that are not `curveArray`.\n *\n * @param pathInput the target `pathArray`\n * @returns the shape total length\n */\nconst getTotalLength = (pathInput: string | PathArray): number => {\n  return pathLengthFactory(pathInput).length;\n};\nexport default getTotalLength;\n","import getPathArea from './getPathArea';\nimport pathToCurve from '../convert/pathToCurve';\nimport type { PathArray } from '../types';\n\n/**\n * Check if a path is drawn clockwise and returns true if so,\n * false otherwise.\n *\n * @param path the path string or `pathArray`\n * @returns true when clockwise or false if not\n */\nconst getDrawDirection = (path: string | PathArray) => {\n  return getPathArea(pathToCurve(path)) >= 0;\n};\n\nexport default getDrawDirection;\n","import type { PathArray } from '../types';\nimport pathLengthFactory from './pathLengthFactory';\n\n/**\n * Returns [x,y] coordinates of a point at a given length of a shape.\n *\n * @param pathInput the `pathArray` to look into\n * @param distance the length of the shape to look at\n * @returns the requested {x, y} point coordinates\n */\nconst getPointAtLength = (pathInput: string | PathArray, distance: number): { x: number; y: number } => {\n  return pathLengthFactory(pathInput, distance).point;\n};\nexport default getPointAtLength;\n","import type { PathArray, PathSegment } from '../types';\nimport type { SegmentProperties } from '../interface';\nimport parsePathString from '../parser/parsePathString';\nimport getTotalLength from './getTotalLength';\n\n/**\n * Returns the segment, its index and length as well as\n * the length to that segment at a given length in a path.\n *\n * @param pathInput target `pathArray`\n * @param distance the given length\n * @returns the requested properties\n */\nconst getPropertiesAtLength = (pathInput: string | PathArray, distance?: number): SegmentProperties => {\n  const pathArray = parsePathString(pathInput);\n\n  let pathTemp = [...pathArray] as PathArray;\n  let pathLength = getTotalLength(pathTemp);\n  let index = pathTemp.length - 1;\n  let lengthAtSegment = 0;\n  let length = 0;\n  let segment = pathArray[0] as PathSegment;\n  const [x, y] = segment.slice(-2) as [number, number];\n  const point = { x, y };\n\n  // If the path is empty, return 0.\n  if (index <= 0 || !distance || !Number.isFinite(distance)) {\n    return {\n      segment,\n      index: 0,\n      length,\n      point,\n      lengthAtSegment,\n    };\n  }\n\n  if (distance >= pathLength) {\n    pathTemp = pathArray.slice(0, -1) as PathArray;\n    lengthAtSegment = getTotalLength(pathTemp);\n    length = pathLength - lengthAtSegment;\n    return {\n      segment: pathArray[index],\n      index,\n      length,\n      lengthAtSegment,\n    };\n  }\n\n  const segments = [] as SegmentProperties[];\n  while (index > 0) {\n    segment = pathTemp[index];\n    pathTemp = pathTemp.slice(0, -1) as PathArray;\n    lengthAtSegment = getTotalLength(pathTemp);\n    length = pathLength - lengthAtSegment;\n    pathLength = lengthAtSegment;\n    segments.push({\n      segment,\n      index,\n      length,\n      lengthAtSegment,\n    });\n    index -= 1;\n  }\n\n  return segments.find(({ lengthAtSegment: l }) => l <= distance) as SegmentProperties;\n};\nexport default getPropertiesAtLength;\n","import type { PathArray } from '../types';\nimport type { PointProperties } from '../interface';\nimport getPointAtLength from './getPointAtLength';\nimport getPropertiesAtLength from './getPropertiesAtLength';\nimport getTotalLength from './getTotalLength';\nimport parsePathString from '../parser/parsePathString';\nimport normalizePath from '../process/normalizePath';\n\n/**\n * Returns the point and segment in path closest to a given point as well as\n * the distance to the path stroke.\n *\n * @see https://bl.ocks.org/mbostock/8027637\n *\n * @param pathInput target `pathArray`\n * @param point the given point\n * @returns the requested properties\n */\nconst getPropertiesAtPoint = (pathInput: string | PathArray, point: { x: number; y: number }): PointProperties => {\n  const path = parsePathString(pathInput);\n  const normalPath = normalizePath(path);\n  const pathLength = getTotalLength(path);\n  const distanceTo = (p: { x: number; y: number }) => {\n    const dx = p.x - point.x;\n    const dy = p.y - point.y;\n    return dx * dx + dy * dy;\n  };\n  let precision = 8;\n  let scan: { x: number; y: number };\n  let closest = { x: 0, y: 0 }; // make TS happy\n  let scanDistance = 0;\n  let bestLength = 0;\n  let bestDistance = Infinity;\n\n  // linear scan for coarse approximation\n  for (let scanLength = 0; scanLength <= pathLength; scanLength += precision) {\n    scan = getPointAtLength(normalPath, scanLength);\n    scanDistance = distanceTo(scan);\n    if (scanDistance < bestDistance) {\n      closest = scan;\n      bestLength = scanLength;\n      bestDistance = scanDistance;\n    }\n  }\n\n  // binary search for precise estimate\n  precision /= 2;\n  let before: { x: number; y: number };\n  let after: { x: number; y: number };\n  let beforeLength = 0;\n  let afterLength = 0;\n  let beforeDistance = 0;\n  let afterDistance = 0;\n\n  while (precision > 0.5) {\n    beforeLength = bestLength - precision;\n    before = getPointAtLength(normalPath, beforeLength);\n    beforeDistance = distanceTo(before);\n    afterLength = bestLength + precision;\n    after = getPointAtLength(normalPath, afterLength);\n    afterDistance = distanceTo(after);\n    if (beforeLength >= 0 && beforeDistance < bestDistance) {\n      closest = before;\n      bestLength = beforeLength;\n      bestDistance = beforeDistance;\n    } else if (afterLength <= pathLength && afterDistance < bestDistance) {\n      closest = after;\n      bestLength = afterLength;\n      bestDistance = afterDistance;\n    } else {\n      precision /= 2;\n    }\n  }\n\n  const segment = getPropertiesAtLength(path, bestLength);\n  const distance = Math.sqrt(bestDistance);\n\n  return { closest, distance, segment };\n};\n\nexport default getPropertiesAtPoint;\n","import type { PathArray } from '../types';\nimport getPropertiesAtPoint from './getPropertiesAtPoint';\n\n/**\n * Returns the point in path closest to a given point.\n *\n * @param pathInput target `pathArray`\n * @param point the given point\n * @returns the best match\n */\nconst getClosestPoint = (pathInput: string | PathArray, point: { x: number; y: number }): { x: number; y: number } => {\n  return getPropertiesAtPoint(pathInput, point).closest;\n};\n\nexport default getClosestPoint;\n","import type { SegmentProperties } from '../interface';\nimport type { PathArray } from '../types';\nimport getPropertiesAtPoint from './getPropertiesAtPoint';\n\n/**\n * Returns the path segment which contains a given point.\n *\n * @param path the `pathArray` to look into\n * @param point the point of the shape to look for\n * @returns the requested segment\n */\nconst getSegmentOfPoint = (\n  path: string | PathArray,\n  point: { x: number; y: number },\n): SegmentProperties | undefined => {\n  return getPropertiesAtPoint(path, point).segment;\n};\nexport default getSegmentOfPoint;\n","import type { PathArray, PathSegment } from '../types';\nimport getPropertiesAtLength from './getPropertiesAtLength';\n\n/**\n * Returns the segment at a given length.\n *\n * @param pathInput the target `pathArray`\n * @param distance the distance in path to look at\n * @returns the requested segment\n */\nconst getSegmentAtLength = (pathInput: string | PathArray, distance?: number): PathSegment | undefined => {\n  return getPropertiesAtLength(pathInput, distance).segment;\n};\n\nexport default getSegmentAtLength;\n","import type { PathArray } from '../types';\nimport getPropertiesAtPoint from './getPropertiesAtPoint';\n\n/**\n * Checks if a given point is in the stroke of a path.\n *\n * @param pathInput target path\n * @param point the given `{x,y}` point\n * @returns the query result\n */\nconst isPointInStroke = (pathInput: string | PathArray, point: { x: number; y: number }) => {\n  const { distance } = getPropertiesAtPoint(pathInput, point);\n  return Math.abs(distance) < 0.001; // 0.01 might be more permissive\n};\nexport default isPointInStroke;\n","import scanSegment from '../parser/scanSegment';\nimport skipSpaces from '../parser/skipSpaces';\nimport PathParser from '../parser/pathParser';\n\n/**\n * Parses a path string value to determine its validity\n * then returns true if it's valid or false otherwise.\n *\n * @param pathString the path string to be parsed\n * @returns the path string validity\n */\nconst isValidPath = (pathString: string) => {\n  if (typeof pathString !== 'string' || !pathString.length) {\n    return false;\n  }\n\n  const path = new PathParser(pathString);\n\n  skipSpaces(path);\n\n  while (path.index < path.max && !path.err.length) {\n    scanSegment(path);\n  }\n\n  return !path.err.length && 'mM'.includes(path.segments[0][0]);\n};\nexport default isValidPath;\n","import type { RelativeArray } from '../types';\nimport isPathArray from './isPathArray';\n\n/**\n * Iterates an array to check if it's a `pathArray`\n * with relative values.\n *\n * @param path the `pathArray` to be checked\n * @returns iteration result\n */\nconst isRelativeArray = (path: unknown): path is RelativeArray => {\n  return (\n    isPathArray(path) &&\n    // `isPathArray` checks if it's `Array`\n    path.slice(1).every(([pc]) => pc === pc.toLowerCase())\n  );\n};\nexport default isRelativeArray;\n","import type { ShapeParams } from '../interface';\n\n/**\n * Supported shapes and their specific parameters.\n */\nconst shapeParams: ShapeParams = {\n  line: ['x1', 'y1', 'x2', 'y2'],\n  circle: ['cx', 'cy', 'r'],\n  ellipse: ['cx', 'cy', 'rx', 'ry'],\n  rect: ['width', 'height', 'x', 'y', 'rx', 'ry'],\n  polygon: ['points'],\n  polyline: ['points'],\n  glyph: ['d'],\n};\n\nexport default shapeParams;\n","import type { CircleAttr, EllipseAttr, GlyphAttr, LineAttr, PolyAttr, RectAttr, ShapeParams } from '../interface';\nimport type { PathArray, PathSegment, ShapeOps, ShapeTypes } from '../types';\nimport error from '../parser/error';\nimport parsePathString from '../parser/parsePathString';\nimport shapeParams from './shapeParams';\nimport isPathArray from './isPathArray';\n\n/**\n * Returns a new `pathArray` from line attributes.\n *\n * @param attr shape configuration\n * @returns a new line `pathArray`\n */\nexport const getLinePath = (attr: LineAttr): PathArray => {\n  let { x1, y1, x2, y2 } = attr;\n  [x1, y1, x2, y2] = [x1, y1, x2, y2].map(a => +a);\n  return [\n    ['M', x1, y1],\n    ['L', x2, y2],\n  ];\n};\n\n/**\n * Returns a new `pathArray` like from polyline/polygon attributes.\n *\n * @param attr shape configuration\n * @return a new polygon/polyline `pathArray`\n */\nexport const getPolyPath = (attr: PolyAttr): PathArray => {\n  const pathArray = [] as PathSegment[];\n  const points = (attr.points || '')\n    .trim()\n    .split(/[\\s|,]/)\n    .map(a => +a);\n\n  let index = 0;\n  while (index < points.length) {\n    pathArray.push([index ? 'L' : 'M', points[index], points[index + 1]]);\n    index += 2;\n  }\n\n  return (attr.type === 'polygon' ? [...pathArray, ['z']] : pathArray) as PathArray;\n};\n\n/**\n * Returns a new `pathArray` from circle attributes.\n *\n * @param attr shape configuration\n * @return a circle `pathArray`\n */\nexport const getCirclePath = (attr: CircleAttr): PathArray => {\n  let { cx, cy, r } = attr;\n  [cx, cy, r] = [cx, cy, r].map(a => +a);\n\n  return [\n    ['M', cx - r, cy],\n    ['a', r, r, 0, 1, 0, 2 * r, 0],\n    ['a', r, r, 0, 1, 0, -2 * r, 0],\n  ];\n};\n\n/**\n * Returns a new `pathArray` from ellipse attributes.\n *\n * @param attr shape configuration\n * @return an ellipse `pathArray`\n */\nexport const getEllipsePath = (attr: EllipseAttr): PathArray => {\n  let { cx, cy } = attr;\n  let rx = attr.rx || 0;\n  let ry = attr.ry || rx;\n  [cx, cy, rx, ry] = [cx, cy, rx, ry].map(a => +a);\n\n  return [\n    ['M', cx - rx, cy],\n    ['a', rx, ry, 0, 1, 0, 2 * rx, 0],\n    ['a', rx, ry, 0, 1, 0, -2 * rx, 0],\n  ];\n};\n\n/**\n * Returns a new `pathArray` like from rect attributes.\n *\n * @param attr object with properties above\n * @return a new `pathArray` from `<rect>` attributes\n */\nexport const getRectanglePath = (attr: RectAttr): PathArray => {\n  const x = +attr.x || 0;\n  const y = +attr.y || 0;\n  const w = +attr.width;\n  const h = +attr.height;\n  let rx = +(attr.rx || 0);\n  let ry = +(attr.ry || rx);\n\n  // Validity checks from http://www.w3.org/TR/SVG/shapes.html#RectElement:\n  if (rx || ry) {\n    // rx = !rx ? ry : rx;\n    // ry = !ry ? rx : ry;\n\n    /* istanbul ignore else */\n    if (rx * 2 > w) rx -= (rx * 2 - w) / 2;\n    /* istanbul ignore else */\n    if (ry * 2 > h) ry -= (ry * 2 - h) / 2;\n\n    return [\n      ['M', x + rx, y],\n      ['h', w - rx * 2],\n      ['s', rx, 0, rx, ry],\n      ['v', h - ry * 2],\n      ['s', 0, ry, -rx, ry],\n      ['h', -w + rx * 2],\n      ['s', -rx, 0, -rx, -ry],\n      ['v', -h + ry * 2],\n      ['s', 0, -ry, rx, -ry],\n    ];\n  }\n\n  return [['M', x, y], ['h', w], ['v', h], ['H', x], ['Z']];\n};\n\n/**\n * Returns a new `pathArray` created from attributes of a `<line>`, `<polyline>`,\n * `<polygon>`, `<rect>`, `<ellipse>`, `<circle>`, <path> or `<glyph>`.\n *\n * The default `ownerDocument` is your current `document` browser page,\n * if you want to use in server-side using `jsdom`, you can pass the\n * `jsdom` `document` to `ownDocument`.\n *\n * It can also work with an options object, see the type below\n *\n * @see ShapeOps\n *\n * @param element target shape\n * @param ownerDocument document for create element\n * @return the newly created `<path>` element\n */\nconst shapeToPathArray = (element: ShapeTypes | ShapeOps, ownerDocument?: Document): PathArray | false => {\n  const doc = ownerDocument || document;\n  const win = doc.defaultView || /* istanbul ignore next */ window;\n  const supportedShapes = Object.keys(shapeParams) as (keyof ShapeParams)[];\n  const targetIsElement = element instanceof win.SVGElement;\n  const tagName = targetIsElement ? element.tagName : null;\n\n  if (tagName && [...supportedShapes, 'path'].every(s => tagName !== s)) {\n    throw TypeError(`${error}: \"${tagName}\" is not SVGElement`);\n  }\n\n  const type = (targetIsElement ? tagName : element.type) as ShapeOps['type'];\n  const shapeAttrs = shapeParams[type] as string[];\n  const config = { type } as Record<string, string>;\n\n  if (targetIsElement) {\n    shapeAttrs.forEach(p => {\n      config[p] = element.getAttribute(p) as string;\n    });\n  } else {\n    Object.assign(config, element);\n  }\n\n  // set d\n  let pathArray = [] as unknown as PathArray;\n\n  /* istanbul ignore else */\n  if (type === 'circle') pathArray = getCirclePath(config as unknown as CircleAttr);\n  else if (type === 'ellipse') pathArray = getEllipsePath(config as unknown as EllipseAttr);\n  else if (['polyline', 'polygon'].includes(type)) pathArray = getPolyPath(config as unknown as PolyAttr);\n  else if (type === 'rect') pathArray = getRectanglePath(config as unknown as RectAttr);\n  else if (type === 'line') pathArray = getLinePath(config as unknown as LineAttr);\n  else if (['glyph', 'path'].includes(type)) {\n    pathArray = parsePathString(targetIsElement ? element.getAttribute('d') || '' : (element as GlyphAttr).d || '');\n  }\n\n  // replace target element\n  if (isPathArray(pathArray) && pathArray.length) {\n    return pathArray;\n  }\n  return false;\n};\nexport default shapeToPathArray;\n","import type { PathArray } from 'src/types';\nimport defaultOptions from '../options/options';\n\n/**\n * Rounds the values of a `pathArray` instance to\n * a specified amount of decimals and returns it.\n *\n * @param path the source `pathArray`\n * @param roundOption the amount of decimals to round numbers to\n * @returns the resulted `pathArray` with rounded values\n */\nconst roundPath = (path: PathArray, roundOption?: number | 'off'): PathArray => {\n  let { round } = defaultOptions;\n  if (roundOption === 'off' || round === 'off') return [...path];\n  // allow for ZERO decimals\n  round = typeof roundOption === 'number' && roundOption >= 0 ? roundOption : round;\n  // to round values to the power\n  // the `round` value must be integer\n  const pow = typeof round === 'number' && round >= 1 ? 10 ** round : 1;\n\n  return path.map(pi => {\n    const values = pi\n      .slice(1)\n      .map(Number)\n      .map(n => (round ? Math.round(n * pow) / pow : Math.round(n)));\n    return [pi[0], ...values];\n  }) as PathArray;\n};\nexport default roundPath;\n","import type { PathArray } from '../types';\nimport roundPath from '../process/roundPath';\n\n/**\n * Returns a valid `d` attribute string value created\n * by rounding values and concatenating the `pathArray` segments.\n *\n * @param path the `pathArray` object\n * @param round amount of decimals to round values to\n * @returns the concatenated path string\n */\nconst pathToString = (path: PathArray, round?: number | 'off'): string => {\n  return roundPath(path, round)\n    .map(x => x[0] + x.slice(1).join(' '))\n    .join('');\n};\nexport default pathToString;\n","import type { ShapeParams } from '../interface';\nimport type { ShapeOps, ShapeTypes } from '../types';\nimport pathToString from '../convert/pathToString';\nimport defaultOptions from '../options/options';\nimport error from '../parser/error';\nimport isValidPath from './isValidPath';\nimport shapeToPathArray from './shapeToPathArray';\nimport shapeParams from './shapeParams';\n\n/**\n * Returns a new `<path>` element created from attributes of a `<line>`, `<polyline>`,\n * `<polygon>`, `<rect>`, `<ellipse>`, `<circle>` or `<glyph>`. If `replace` parameter\n * is `true`, it will replace the target. The default `ownerDocument` is your current\n * `document` browser page, if you want to use in server-side using `jsdom`, you can\n * pass the `jsdom` `document` to `ownDocument`.\n *\n * It can also work with an options object, see the type below\n *\n * @see ShapeOps\n *\n * The newly created `<path>` element keeps all non-specific\n * attributes like `class`, `fill`, etc.\n *\n * @param element target shape\n * @param replace option to replace target\n * @param ownerDocument document for create element\n * @return the newly created `<path>` element\n */\nconst shapeToPath = (\n  element: ShapeTypes | ShapeOps,\n  replace?: boolean,\n  ownerDocument?: Document,\n): SVGPathElement | false => {\n  const doc = ownerDocument || document;\n  const win = doc.defaultView || /* istanbul ignore next */ window;\n  const supportedShapes = Object.keys(shapeParams) as (keyof ShapeParams)[];\n  const targetIsElement = element instanceof win.SVGElement;\n  const tagName = targetIsElement ? element.tagName : null;\n\n  if (tagName === 'path') throw TypeError(`${error}: \"${tagName}\" is already SVGPathElement`);\n  if (tagName && supportedShapes.every(s => tagName !== s)) throw TypeError(`${error}: \"${tagName}\" is not SVGElement`);\n\n  const path = doc.createElementNS('http://www.w3.org/2000/svg', 'path');\n  const type = (targetIsElement ? tagName : element.type) as ShapeOps['type'];\n  const shapeAttrs = shapeParams[type] as string[];\n  const config = { type } as Record<string, string>;\n\n  // set d\n  const round = defaultOptions.round as number;\n  const pathArray = shapeToPathArray(element, doc);\n  const description = pathArray && pathArray.length ? pathToString(pathArray, round) : '';\n\n  if (targetIsElement) {\n    shapeAttrs.forEach(p => {\n      config[p] = element.getAttribute(p) as string;\n    });\n    // set no-specific shape attributes: fill, stroke, etc\n    Object.values(element.attributes).forEach(({ name, value }) => {\n      if (!shapeAttrs.includes(name)) path.setAttribute(name, value);\n    });\n  } else {\n    Object.assign(config, element);\n    // set no-specific shape attributes: fill, stroke, etc\n    Object.keys(config).forEach(k => {\n      if (!shapeAttrs.includes(k) && k !== 'type') {\n        path.setAttribute(\n          k.replace(/[A-Z]/g, m => `-${m.toLowerCase()}`),\n          config[k],\n        );\n      }\n    });\n  }\n\n  // replace target element\n  if (isValidPath(description)) {\n    path.setAttribute('d', description);\n    if (replace && targetIsElement) {\n      element.before(path, element);\n      element.remove();\n    }\n    return path;\n  }\n  return false;\n};\n\nexport default shapeToPath;\n","import type { PathArray } from '../types';\n\n/**\n * Split a path into an `Array` of sub-path strings.\n *\n * In the process, values are converted to absolute\n * for visual consistency.\n *\n * @param pathInput the source `pathArray`\n * @return {SVGPath.pathArray[]} an array with all sub-path strings\n */\nconst splitPath = (pathInput: PathArray): PathArray[] => {\n  const composite = [] as PathArray[];\n  let path: PathArray;\n  let pi = -1;\n\n  pathInput.forEach(seg => {\n    if (seg[0] === 'M') {\n      path = [seg];\n      pi += 1;\n    } else {\n      path = [...path, seg];\n    }\n    composite[pi] = path;\n  });\n\n  return composite;\n};\nexport default splitPath;\n","import type {\n  aSegment,\n  hSegment,\n  PathArray,\n  RelativeArray,\n  RelativeCommand,\n  RelativeSegment,\n  vSegment,\n} from '../types';\nimport parsePathString from '../parser/parsePathString';\nimport isRelativeArray from '../util/isRelativeArray';\n\n/**\n * Parses a path string value or object and returns an array\n * of segments, all converted to relative values.\n *\n * @param pathInput the path string | object\n * @returns the resulted `pathArray` with relative values\n */\nconst pathToRelative = (pathInput: string | PathArray): RelativeArray => {\n  /* istanbul ignore else */\n  if (isRelativeArray(pathInput)) {\n    return [...pathInput];\n  }\n\n  const path = parsePathString(pathInput);\n  let x = 0;\n  let y = 0;\n  let mx = 0;\n  let my = 0;\n\n  return path.map(segment => {\n    const values = segment.slice(1).map(Number);\n    const [pathCommand] = segment;\n    const relativeCommand = pathCommand.toLowerCase() as RelativeCommand;\n\n    if (pathCommand === 'M') {\n      [x, y] = values;\n      mx = x;\n      my = y;\n      return ['M', x, y];\n    }\n\n    let relativeSegment = [];\n\n    if (pathCommand !== relativeCommand) {\n      if (relativeCommand === 'a') {\n        relativeSegment = [\n          relativeCommand,\n          values[0],\n          values[1],\n          values[2],\n          values[3],\n          values[4],\n          values[5] - x,\n          values[6] - y,\n        ] as aSegment;\n      } else if (relativeCommand === 'v') {\n        relativeSegment = [relativeCommand, values[0] - y] as vSegment;\n      } else if (relativeCommand === 'h') {\n        relativeSegment = [relativeCommand, values[0] - x] as hSegment;\n      } else {\n        // use brakets for `eslint: no-case-declaration`\n        // https://stackoverflow.com/a/50753272/803358\n        const relValues = values.map((n, j) => n - (j % 2 ? y : x));\n        relativeSegment = [relativeCommand, ...relValues] as RelativeSegment;\n      }\n    } else {\n      if (pathCommand === 'm') {\n        mx = values[0] + x;\n        my = values[1] + y;\n      }\n      relativeSegment = [relativeCommand, ...values] as RelativeSegment;\n    }\n\n    const segLength = relativeSegment.length;\n    if (relativeCommand === 'z') {\n      x = mx;\n      y = my;\n    } else if (relativeCommand === 'h') {\n      x += relativeSegment[1] as number;\n    } else if (relativeCommand === 'v') {\n      y += relativeSegment[1] as number;\n    } else {\n      x += relativeSegment[segLength - 2] as number;\n      y += relativeSegment[segLength - 1] as number;\n    }\n\n    return relativeSegment as typeof segment;\n  }) as RelativeArray;\n};\nexport default pathToRelative;\n","import type { ParserParams } from 'src/interface';\nimport type {\n  AbsoluteSegment,\n  HSegment,\n  NormalSegment,\n  PathCommand,\n  ShortSegment,\n  SSegment,\n  TSegment,\n  VSegment,\n  ZSegment,\n} from '../types';\n\n/**\n * Shorten a single segment of a `pathArray` object.\n *\n * @param segment the `absoluteSegment` object\n * @param normalSegment the `normalSegment` object\n * @param params the coordinates of the previous segment\n * @param prevCommand the path command of the previous segment\n * @returns the shortened segment\n */\nconst shortenSegment = (\n  segment: AbsoluteSegment,\n  normalSegment: NormalSegment,\n  params: ParserParams,\n  prevCommand: PathCommand,\n): ShortSegment => {\n  const [pathCommand] = segment;\n  const round4 = (n: number) => Math.round(n * 10 ** 4) / 10 ** 4;\n  const segmentValues = segment.slice(1).map(n => +n);\n  const normalValues = normalSegment.slice(1).map(n => +n);\n  const { x1: px1, y1: py1, x2: px2, y2: py2, x: px, y: py } = params;\n  let result = segment;\n  const [x, y] = normalValues.slice(-2);\n\n  if (!'TQ'.includes(pathCommand)) {\n    // optional but good to be cautious\n    params.qx = null;\n    params.qy = null;\n  }\n\n  if (['V', 'H', 'S', 'T', 'Z'].includes(pathCommand)) {\n    result = [pathCommand, ...segmentValues] as VSegment | HSegment | SSegment | TSegment | ZSegment;\n  } else if (pathCommand === 'L') {\n    if (round4(px) === round4(x)) {\n      result = ['V', y];\n    } else if (round4(py) === round4(y)) {\n      result = ['H', x];\n    }\n  } else if (pathCommand === 'C') {\n    const [x1, y1] = normalValues;\n\n    if (\n      'CS'.includes(prevCommand) &&\n      ((round4(x1) === round4(px1 * 2 - px2) && round4(y1) === round4(py1 * 2 - py2)) ||\n        (round4(px1) === round4(px2 * 2 - px) && round4(py1) === round4(py2 * 2 - py)))\n    ) {\n      result = ['S', ...normalValues.slice(-4)] as SSegment;\n    }\n    params.x1 = x1;\n    params.y1 = y1;\n  } else if (pathCommand === 'Q') {\n    const [qx, qy] = normalValues;\n    params.qx = qx;\n    params.qy = qy;\n\n    if (\n      'QT'.includes(prevCommand) &&\n      ((round4(qx) === round4(px1 * 2 - px2) && round4(qy) === round4(py1 * 2 - py2)) ||\n        (round4(px1) === round4(px2 * 2 - px) && round4(py1) === round4(py2 * 2 - py)))\n    ) {\n      result = ['T', ...normalValues.slice(-2)] as TSegment;\n    }\n  }\n\n  return result as ShortSegment;\n};\nexport default shortenSegment;\n","import roundPath from './roundPath';\nimport pathToAbsolute from '../convert/pathToAbsolute';\nimport pathToRelative from '../convert/pathToRelative';\nimport shortenSegment from './shortenSegment';\nimport paramsParser from '../parser/paramsParser';\nimport normalizePath from './normalizePath';\nimport type { PathSegment, HSegment, PathArray, VSegment, PathCommand, AbsoluteSegment } from '../types';\n\n/**\n * Optimizes a `pathArray` object:\n * * convert segments to shorthand if possible\n * * select shortest segments from absolute and relative `pathArray`s\n *\n * @param pathInput a string or `pathArray`\n * @param round the amount of decimals to round values to\n * @returns the optimized `pathArray`\n */\nconst optimizePath = (pathInput: PathArray, round: 'off' | number): PathArray => {\n  const path = pathToAbsolute(pathInput);\n  const normalPath = normalizePath(path);\n  const params = { ...paramsParser };\n  const allPathCommands = [] as PathCommand[];\n  const ii = path.length;\n  let pathCommand = '' as PathCommand;\n  let prevCommand = '' as PathCommand;\n  let x = 0;\n  let y = 0;\n  let mx = 0;\n  let my = 0;\n\n  for (let i = 0; i < ii; i += 1) {\n    [pathCommand] = path[i];\n\n    // Save current path command\n    allPathCommands[i] = pathCommand;\n    // Get previous path command for `shortenSegment`\n    if (i) prevCommand = allPathCommands[i - 1];\n    path[i] = shortenSegment(path[i], normalPath[i], params, prevCommand) as AbsoluteSegment;\n\n    const segment = path[i];\n    const seglen = segment.length;\n\n    // update C, S, Q, T specific params\n    params.x1 = +segment[seglen - 2];\n    params.y1 = +segment[seglen - 1];\n    params.x2 = +segment[seglen - 4] || params.x1;\n    params.y2 = +segment[seglen - 3] || params.y1;\n\n    // update x, y params\n    switch (pathCommand) {\n      case 'Z':\n        x = mx;\n        y = my;\n        break;\n      case 'H':\n        [, x] = segment as HSegment;\n        break;\n      case 'V':\n        [, y] = segment as VSegment;\n        break;\n      default:\n        [x, y] = segment.slice(-2).map(Number);\n\n        if (pathCommand === 'M') {\n          mx = x;\n          my = y;\n        }\n    }\n    params.x = x;\n    params.y = y;\n  }\n\n  const absolutePath = roundPath(path, round);\n  const relativePath = roundPath(pathToRelative(path), round);\n\n  return absolutePath.map((a: PathSegment, i: number) => {\n    if (i) {\n      return a.join('').length < relativePath[i].join('').length ? a : relativePath[i];\n    }\n    return a;\n  }) as PathArray;\n};\nexport default optimizePath;\n","import type { CurveArray } from '../types';\n\n/**\n * Reverses all segments of a `pathArray`\n * which consists of only C (cubic-bezier) path commands.\n *\n * @param path the source `pathArray`\n * @returns the reversed `pathArray`\n */\nconst reverseCurve = (path: CurveArray): CurveArray => {\n  const rotatedCurve = path\n    .slice(1)\n    .map((x, i, curveOnly) =>\n      !i ? [...path[0].slice(1), ...x.slice(1)] : [...curveOnly[i - 1].slice(-2), ...x.slice(1)],\n    )\n    .map(x => x.map((_, i) => x[x.length - i - 2 * (1 - (i % 2))]))\n    .reverse();\n\n  return [['M', ...rotatedCurve[0].slice(0, 2)], ...rotatedCurve.map(x => ['C', ...x.slice(2)])] as CurveArray;\n};\nexport default reverseCurve;\n","import type {\n  ASegment,\n  CSegment,\n  HSegment,\n  MSegment,\n  PathArray,\n  PathSegment,\n  QSegment,\n  SSegment,\n  TSegment,\n  VSegment,\n} from 'src/types';\nimport pathToAbsolute from '../convert/pathToAbsolute';\nimport normalizePath from './normalizePath';\n\n/**\n * Reverses all segments of a `pathArray` and returns a new `pathArray` instance.\n *\n * @param pathInput the source `pathArray`\n * @returns the reversed `pathArray`\n */\nconst reversePath = (pathInput: PathArray): PathArray => {\n  const absolutePath = pathToAbsolute(pathInput);\n  const isClosed = absolutePath.slice(-1)[0][0] === 'Z';\n\n  const reversedPath = normalizePath(absolutePath)\n    .map((segment, i) => {\n      const [x, y] = segment.slice(-2).map(Number);\n      return {\n        seg: absolutePath[i], // absolute\n        n: segment, // normalized\n        c: absolutePath[i][0], // pathCommand\n        x, // x\n        y, // y\n      };\n    })\n    .map((seg, i, path) => {\n      const segment = seg.seg;\n      const data = seg.n;\n      const prevSeg = i && path[i - 1];\n      const nextSeg = path[i + 1];\n      const pathCommand = seg.c;\n      const pLen = path.length;\n      const x = i ? path[i - 1].x : path[pLen - 1].x;\n      const y = i ? path[i - 1].y : path[pLen - 1].y;\n      let result = [];\n\n      switch (pathCommand) {\n        case 'M':\n          result = (isClosed ? ['Z'] : [pathCommand, x, y]) as PathSegment;\n          break;\n        case 'A':\n          result = [pathCommand, ...segment.slice(1, -3), segment[5] === 1 ? 0 : 1, x, y] as ASegment;\n          break;\n        case 'C':\n          if (nextSeg && nextSeg.c === 'S') {\n            result = ['S', segment[1], segment[2], x, y] as SSegment;\n          } else {\n            result = [pathCommand, segment[3], segment[4], segment[1], segment[2], x, y] as CSegment;\n          }\n          break;\n        case 'S':\n          if (prevSeg && 'CS'.includes(prevSeg.c) && (!nextSeg || nextSeg.c !== 'S')) {\n            result = ['C', data[3], data[4], data[1], data[2], x, y] as CSegment;\n          } else {\n            result = [pathCommand, data[1], data[2], x, y] as SSegment;\n          }\n          break;\n        case 'Q':\n          if (nextSeg && nextSeg.c === 'T') {\n            result = ['T', x, y] as TSegment;\n          } else {\n            result = [pathCommand, ...segment.slice(1, -2), x, y] as QSegment;\n          }\n          break;\n        case 'T':\n          if (prevSeg && 'QT'.includes(prevSeg.c) && (!nextSeg || nextSeg.c !== 'T')) {\n            result = ['Q', data[1], data[2], x, y] as QSegment;\n          } else {\n            result = [pathCommand, x, y] as TSegment;\n          }\n          break;\n        case 'Z':\n          result = ['M', x, y] as MSegment;\n          break;\n        case 'H':\n          result = [pathCommand, x] as HSegment;\n          break;\n        case 'V':\n          result = [pathCommand, y] as VSegment;\n          break;\n        default:\n          result = [pathCommand, ...segment.slice(1, -2), x, y] as PathSegment;\n      }\n\n      return result;\n    });\n\n  return (isClosed ? reversedPath.reverse() : [reversedPath[0], ...reversedPath.slice(1).reverse()]) as PathArray;\n};\nexport default reversePath;\n","import CSSMatrix from '@thednp/dommatrix';\n// import type { TransformObject } from '../interface';\nimport type { TransformObjectValues } from '../types';\n\n/**\n * Returns a transformation matrix to apply to `<path>` elements.\n *\n * @see TransformObjectValues\n *\n * @param transform the `transformObject`\n * @returns a new transformation matrix\n */\nconst getSVGMatrix = (transform: TransformObjectValues): CSSMatrix => {\n  let matrix = new CSSMatrix();\n  const { origin } = transform;\n  const [originX, originY] = origin as [number, number, number];\n  const { translate } = transform;\n  const { rotate } = transform;\n  const { skew } = transform;\n  const { scale } = transform;\n\n  // set translate\n  if (\n    Array.isArray(translate) &&\n    translate.length >= 2 &&\n    translate.every(x => !Number.isNaN(+x)) &&\n    translate.some(x => x !== 0)\n  ) {\n    matrix = matrix.translate(...(translate as [number, number, number?]));\n  } else if (typeof translate === 'number' && !Number.isNaN(translate)) {\n    matrix = matrix.translate(translate);\n  }\n\n  if (rotate || skew || scale) {\n    // set SVG transform-origin, always defined\n    matrix = matrix.translate(originX, originY);\n\n    // set rotation\n    if (\n      Array.isArray(rotate) &&\n      rotate.length >= 2 &&\n      rotate.every(x => !Number.isNaN(+x)) &&\n      rotate.some(x => x !== 0)\n    ) {\n      matrix = matrix.rotate(...(rotate as [number, number, number?]));\n    } else if (typeof rotate === 'number' && !Number.isNaN(rotate)) {\n      matrix = matrix.rotate(rotate);\n    }\n\n    // set skew(s)\n    if (Array.isArray(skew) && skew.length === 2 && skew.every(x => !Number.isNaN(+x)) && skew.some(x => x !== 0)) {\n      matrix = skew[0] ? matrix.skewX(skew[0]) : matrix;\n      matrix = skew[1] ? matrix.skewY(skew[1]) : matrix;\n    } else if (typeof skew === 'number' && !Number.isNaN(skew)) {\n      matrix = matrix.skewX(skew);\n    }\n\n    // set scale\n    if (Array.isArray(scale) && scale.length >= 2 && scale.every(x => !Number.isNaN(+x)) && scale.some(x => x !== 1)) {\n      matrix = matrix.scale(...(scale as [number, number, number?]));\n    } else if (typeof scale === 'number' && !Number.isNaN(scale)) {\n      matrix = matrix.scale(scale);\n    }\n    // set SVG transform-origin\n    matrix = matrix.translate(-originX, -originY);\n  }\n\n  return matrix;\n};\nexport default getSVGMatrix;\n","import CSSMatrix from '@thednp/dommatrix';\n\n/**\n * Transforms a specified point using a matrix, returning a new\n * Tuple *Object* comprising of the transformed point.\n * Neither the matrix nor the original point are altered.\n *\n * @copyright thednp © 2021\n *\n * @param cssm CSSMatrix instance\n * @param v Tuple\n * @return the resulting Tuple\n */\nconst translatePoint = (cssm: CSSMatrix, v: [number, number, number, number]): [number, number, number, number] => {\n  let m = CSSMatrix.Translate(...(v.slice(0, -1) as [number, number, number]));\n\n  [, , , m.m44] = v;\n  m = cssm.multiply(m);\n\n  return [m.m41, m.m42, m.m43, m.m44];\n};\n\n/**\n * Returns the [x,y] projected coordinates for a given an [x,y] point\n * and an [x,y,z] perspective origin point.\n *\n * Equation found here =>\n * http://en.wikipedia.org/wiki/3D_projection#Diagram\n * Details =>\n * https://stackoverflow.com/questions/23792505/predicted-rendering-of-css-3d-transformed-pixel\n *\n * @param m the transformation matrix\n * @param point2D the initial [x,y] coordinates\n * @param origin the [x,y,z] transform origin\n * @returns the projected [x,y] coordinates\n */\nconst projection2d = (m: CSSMatrix, point2D: [number, number], origin: [number, number, number]): [number, number] => {\n  const [originX, originY, originZ] = origin;\n  const [x, y, z] = translatePoint(m, [...point2D, 0, 1]);\n\n  const relativePositionX = x - originX;\n  const relativePositionY = y - originY;\n  const relativePositionZ = z - originZ;\n\n  return [\n    // protect against division by ZERO\n    relativePositionX * (Math.abs(originZ) / Math.abs(relativePositionZ) || 1) + originX,\n    relativePositionY * (Math.abs(originZ) / Math.abs(relativePositionZ) || 1) + originY,\n  ];\n};\nexport default projection2d;\n","import normalizePath from './normalizePath';\nimport pathToAbsolute from '../convert/pathToAbsolute';\nimport segmentToCubic from './segmentToCubic';\nimport fixArc from './fixArc';\nimport getSVGMatrix from './getSVGMatrix';\nimport projection2d from './projection2d';\nimport paramsParser from '../parser/paramsParser';\nimport defaultOptions from '../options/options';\nimport type { PathArray, PathCommand, TransformObjectValues } from '../types';\nimport type { PathTransform, TransformObject } from '../interface';\n\n/**\n * Apply a 2D / 3D transformation to a `pathArray` instance.\n *\n * Since *SVGElement* doesn't support 3D transformation, this function\n * creates a 2D projection of the <path> element.\n *\n * @param path the `pathArray` to apply transformation\n * @param transform the transform functions `Object`\n * @returns the resulted `pathArray`\n */\nconst transformPath = (path: string | PathArray, transform?: Partial<TransformObject>): PathArray => {\n  let x = 0;\n  let y = 0;\n  let i;\n  let j;\n  let ii;\n  let jj;\n  let lx;\n  let ly;\n  const absolutePath = pathToAbsolute(path);\n  const transformProps = transform && Object.keys(transform);\n\n  // when used as a static method, invalidate somehow\n  if (!transform || (transformProps && !transformProps.length)) return [...absolutePath];\n\n  const normalizedPath = normalizePath(absolutePath);\n  // transform origin is extremely important\n  if (!transform.origin) {\n    const { origin: defaultOrigin } = defaultOptions;\n    Object.assign(transform, { origin: defaultOrigin });\n  }\n  const matrixInstance = getSVGMatrix(transform as TransformObjectValues);\n  const { origin } = transform;\n  const params = { ...paramsParser };\n  let segment = [];\n  let seglen = 0;\n  let pathCommand = '';\n  let transformedPath = [] as PathTransform[];\n  const allPathCommands = [] as PathCommand[]; // needed for arc to curve transformation\n\n  if (!matrixInstance.isIdentity) {\n    for (i = 0, ii = absolutePath.length; i < ii; i += 1) {\n      segment = absolutePath[i];\n\n      /* istanbul ignore else */\n      if (absolutePath[i]) [pathCommand] = segment;\n\n      // REPLACE Arc path commands with Cubic Beziers\n      // we don't have any scripting know-how on 3d ellipse transformation\n      // Arc segments don't work 3D transformations or skews\n      /// ////////////////////////////////////////\n      allPathCommands[i] = pathCommand as PathCommand;\n\n      if (pathCommand === 'A') {\n        segment = segmentToCubic(normalizedPath[i], params);\n\n        absolutePath[i] = segmentToCubic(normalizedPath[i], params);\n        fixArc(absolutePath, allPathCommands, i);\n\n        normalizedPath[i] = segmentToCubic(normalizedPath[i], params);\n        fixArc(normalizedPath, allPathCommands, i);\n        ii = Math.max(absolutePath.length, normalizedPath.length);\n      }\n\n      /// ////////////////////////////////////////\n      segment = normalizedPath[i];\n      seglen = segment.length;\n\n      params.x1 = +segment[seglen - 2];\n      params.y1 = +segment[seglen - 1];\n      params.x2 = +segment[seglen - 4] || params.x1;\n      params.y2 = +segment[seglen - 3] || params.y1;\n\n      const result = {\n        s: absolutePath[i],\n        c: absolutePath[i][0],\n        x: params.x1,\n        y: params.y1,\n      };\n\n      transformedPath = [...transformedPath, ...[result]];\n    }\n\n    return transformedPath.map(seg => {\n      pathCommand = seg.c;\n      segment = seg.s;\n      if (pathCommand === 'L' || pathCommand === 'H' || pathCommand === 'V') {\n        [lx, ly] = projection2d(matrixInstance, [seg.x, seg.y], origin as [number, number, number]);\n\n        /* istanbul ignore else */\n        if (x !== lx && y !== ly) {\n          segment = ['L', lx, ly];\n        } else if (y === ly) {\n          segment = ['H', lx];\n        } else if (x === lx) {\n          segment = ['V', ly];\n        }\n\n        // now update x and y\n        x = lx;\n        y = ly;\n\n        return segment;\n      } else {\n        for (j = 1, jj = segment.length; j < jj; j += 2) {\n          [x, y] = projection2d(matrixInstance, [+segment[j], +segment[j + 1]], origin as [number, number, number]);\n          segment[j] = x;\n          segment[j + 1] = y;\n        }\n\n        return segment;\n      }\n    }) as PathArray;\n  }\n  return [...absolutePath];\n};\nexport default transformPath;\n","import midPoint from '../math/midPoint';\nimport type { CubicSegment } from '../types';\n\n/**\n * Split a cubic-bezier segment into two.\n *\n * @param pts the cubic-bezier parameters\n * @return two new cubic-bezier segments\n */\nconst splitCubic = (pts: number[] /* , ratio */): [CubicSegment, CubicSegment] => {\n  const t = /* ratio || */ 0.5;\n  const p0 = pts.slice(0, 2) as [number, number];\n  const p1 = pts.slice(2, 4) as [number, number];\n  const p2 = pts.slice(4, 6) as [number, number];\n  const p3 = pts.slice(6, 8) as [number, number];\n  const p4 = midPoint(p0, p1, t);\n  const p5 = midPoint(p1, p2, t);\n  const p6 = midPoint(p2, p3, t);\n  const p7 = midPoint(p4, p5, t);\n  const p8 = midPoint(p5, p6, t);\n  const p9 = midPoint(p7, p8, t);\n\n  return [\n    ['C', ...p4, ...p7, ...p9],\n    ['C', ...p8, ...p6, ...p3],\n  ];\n};\nexport default splitCubic;\n","import { PathArray, TransformObjectValues } from './types';\nimport { Options, PathBBox, TransformEntries, TransformObject } from './interface';\nimport defaultOptions from './options/options';\n\nimport error from './parser/error';\nimport parsePathString from './parser/parsePathString';\n\nimport polygonArea from './math/polygonArea';\nimport polygonLength from './math/polygonLength';\n\nimport CSSMatrix from '@thednp/dommatrix';\nimport getPathBBox from './util/getPathBBox';\nimport getPathArea from './util/getPathArea';\nimport getTotalLength from './util/getTotalLength';\nimport getDrawDirection from './util/getDrawDirection';\nimport getPointAtLength from './util/getPointAtLength';\nimport pathLengthFactory from './util/pathLengthFactory';\n\nimport getPropertiesAtLength from './util/getPropertiesAtLength';\nimport getPropertiesAtPoint from './util/getPropertiesAtPoint';\nimport getClosestPoint from './util/getClosestPoint';\nimport getSegmentOfPoint from './util/getSegmentOfPoint';\nimport getSegmentAtLength from './util/getSegmentAtLength';\nimport isPointInStroke from './util/isPointInStroke';\n\nimport isValidPath from './util/isValidPath';\nimport isPathArray from './util/isPathArray';\nimport isAbsoluteArray from './util/isAbsoluteArray';\nimport isRelativeArray from './util/isRelativeArray';\nimport isCurveArray from './util/isCurveArray';\nimport isNormalizedArray from './util/isNormalizedArray';\nimport shapeToPathArray from './util/shapeToPathArray';\nimport shapeToPath from './util/shapeToPath';\n\nimport roundPath from './process/roundPath';\nimport splitPath from './process/splitPath';\nimport optimizePath from './process/optimizePath';\nimport reverseCurve from './process/reverseCurve';\nimport reversePath from './process/reversePath';\nimport normalizePath from './process/normalizePath';\nimport transformPath from './process/transformPath';\nimport splitCubic from './process/splitCubic';\nimport arcToCubic from './process/arcToCubic';\n\nimport pathToAbsolute from './convert/pathToAbsolute';\nimport pathToRelative from './convert/pathToRelative';\nimport pathToCurve from './convert/pathToCurve';\nimport pathToString from './convert/pathToString';\nimport getSVGMatrix from './process/getSVGMatrix';\n\n/**\n * Creates a new SVGPathCommander instance with the following properties:\n * * segments: `pathArray`\n * * round: number\n * * origin: [number, number, number?]\n *\n * @class\n * @author thednp <https://github.com/thednp/svg-path-commander>\n * @returns {SVGPathCommander} a new SVGPathCommander instance\n */\nclass SVGPathCommander {\n  // bring main utilities to front\n  public static CSSMatrix = CSSMatrix;\n  public static getPathBBox = getPathBBox;\n  public static getPathArea = getPathArea;\n  public static getTotalLength = getTotalLength;\n  public static getDrawDirection = getDrawDirection;\n  public static getPointAtLength = getPointAtLength;\n  public static pathLengthFactory = pathLengthFactory;\n  public static getPropertiesAtLength = getPropertiesAtLength;\n  public static getPropertiesAtPoint = getPropertiesAtPoint;\n  public static polygonLength = polygonLength;\n  public static polygonArea = polygonArea;\n  public static getClosestPoint = getClosestPoint;\n  public static getSegmentOfPoint = getSegmentOfPoint;\n  public static getSegmentAtLength = getSegmentAtLength;\n  public static isPointInStroke = isPointInStroke;\n  public static isValidPath = isValidPath;\n  public static isPathArray = isPathArray;\n  public static isAbsoluteArray = isAbsoluteArray;\n  public static isRelativeArray = isRelativeArray;\n  public static isCurveArray = isCurveArray;\n  public static isNormalizedArray = isNormalizedArray;\n  public static shapeToPath = shapeToPath;\n  public static shapeToPathArray = shapeToPathArray;\n  public static parsePathString = parsePathString;\n  public static roundPath = roundPath;\n  public static splitPath = splitPath;\n  public static splitCubic = splitCubic;\n  public static optimizePath = optimizePath;\n  public static reverseCurve = reverseCurve;\n  public static reversePath = reversePath;\n  public static normalizePath = normalizePath;\n  public static transformPath = transformPath;\n  public static pathToAbsolute = pathToAbsolute;\n  public static pathToRelative = pathToRelative;\n  public static pathToCurve = pathToCurve;\n  public static pathToString = pathToString;\n  public static arcToCubic = arcToCubic;\n  public static getSVGMatrix = getSVGMatrix;\n  // declare class properties\n  declare segments: PathArray;\n  declare round: number | 'off';\n  declare origin: [number, number, number];\n\n  /**\n   * @constructor\n   * @param {string} pathValue the path string\n   * @param {any} config instance options\n   */\n  constructor(pathValue: string, config?: Partial<Options>) {\n    const instanceOptions = config || {};\n    const undefPath = typeof pathValue === 'undefined';\n\n    if (undefPath || !pathValue.length) {\n      throw TypeError(`${error}: \"pathValue\" is ${undefPath ? 'undefined' : 'empty'}`);\n    }\n\n    const segments = parsePathString(pathValue);\n    // if (typeof segments === 'string') {\n    //   throw TypeError(segments);\n    // }\n\n    this.segments = segments;\n\n    const { width, height, cx, cy, cz } = this.getBBox();\n\n    // set instance options.round\n    const { round: roundOption, origin: originOption } = instanceOptions;\n    let round: number | 'off';\n\n    if (roundOption === 'auto') {\n      const pathScale = `${Math.floor(Math.max(width, height))}`.length;\n      round = pathScale >= 4 ? 0 : 4 - pathScale;\n    } else if (Number.isInteger(roundOption) || roundOption === 'off') {\n      round = roundOption as number | 'off';\n    } else {\n      round = defaultOptions.round as number;\n    }\n\n    // set instance options.origin\n    // the SVGPathCommander class will always override the default origin\n    let origin: [number, number, number];\n    if (Array.isArray(originOption) && originOption.length >= 2) {\n      const [originX, originY, originZ] = originOption.map(Number);\n      origin = [\n        !Number.isNaN(originX) ? originX : cx,\n        !Number.isNaN(originY) ? originY : cy,\n        !Number.isNaN(originZ) ? originZ : cz,\n      ];\n    } else {\n      origin = [cx, cy, cz];\n    }\n\n    this.round = round;\n    this.origin = origin;\n\n    return this;\n  }\n\n  /**\n   * Returns the path bounding box, equivalent to native `path.getBBox()`.\n   *\n   * @public\n   * @returns the pathBBox\n   */\n  getBBox(): PathBBox {\n    return getPathBBox(this.segments);\n  }\n\n  /**\n   * Returns the total path length, equivalent to native `path.getTotalLength()`.\n   *\n   * @public\n   * @returns the path total length\n   */\n  getTotalLength() {\n    return getTotalLength(this.segments);\n  }\n\n  /**\n   * Returns an `{x,y}` point in the path stroke at a given length,\n   * equivalent to the native `path.getPointAtLength()`.\n   *\n   * @public\n   * @param length the length\n   * @returns the requested point\n   */\n  getPointAtLength(length: number): { x: number; y: number } {\n    return getPointAtLength(this.segments, length);\n  }\n\n  /**\n   * Convert path to absolute values\n   *\n   * @public\n   */\n  toAbsolute() {\n    const { segments } = this;\n    this.segments = pathToAbsolute(segments);\n    return this;\n  }\n\n  /**\n   * Convert path to relative values\n   *\n   * @public\n   */\n  toRelative() {\n    const { segments } = this;\n    this.segments = pathToRelative(segments);\n    return this;\n  }\n\n  /**\n   * Convert path to cubic-bezier values. In addition, un-necessary `Z`\n   * segment is removed if previous segment extends to the `M` segment.\n   *\n   * @public\n   */\n  toCurve() {\n    const { segments } = this;\n    this.segments = pathToCurve(segments);\n    return this;\n  }\n\n  /**\n   * Reverse the order of the segments and their values.\n   *\n   * @param onlySubpath option to reverse all sub-paths except first\n   * @public\n   */\n  reverse(onlySubpath?: boolean) {\n    this.toAbsolute();\n\n    const { segments } = this;\n    const split = splitPath(segments);\n    const subPath = split.length > 1 ? split : false;\n\n    const absoluteMultiPath = subPath\n      ? [...subPath].map((x, i) => {\n          if (onlySubpath) {\n            // return i ? reversePath(x) : parsePathString(x);\n            return i ? reversePath(x) : [...x];\n          }\n          return reversePath(x);\n        })\n      : [...segments];\n\n    let path = [];\n    if (subPath) {\n      path = absoluteMultiPath.flat(1);\n    } else {\n      path = onlySubpath ? segments : reversePath(segments);\n    }\n\n    this.segments = [...path] as PathArray;\n    return this;\n  }\n\n  /**\n   * Normalize path in 2 steps:\n   * * convert `pathArray`(s) to absolute values\n   * * convert shorthand notation to standard notation\n   *\n   * @public\n   */\n  normalize() {\n    const { segments } = this;\n    this.segments = normalizePath(segments);\n    return this;\n  }\n\n  /**\n   * Optimize `pathArray` values:\n   * * convert segments to absolute and/or relative values\n   * * select segments with shortest resulted string\n   * * round values to the specified `decimals` option value\n   *\n   * @public\n   */\n  optimize() {\n    const { segments } = this;\n\n    this.segments = optimizePath(segments, this.round);\n    return this;\n  }\n\n  /**\n   * Transform path using values from an `Object` defined as `transformObject`.\n   *\n   * @see TransformObject for a quick refference\n   *\n   * @param source a `transformObject`as described above\n   * @public\n   */\n  transform(source?: Partial<TransformObject>) {\n    if (\n      !source ||\n      typeof source !== 'object' ||\n      (typeof source === 'object' && !['translate', 'rotate', 'skew', 'scale'].some(x => x in source))\n    )\n      return this;\n\n    const {\n      segments,\n      origin: [cx, cy, cz],\n    } = this;\n    const transform = {} as TransformObjectValues;\n    for (const [k, v] of Object.entries(source) as TransformEntries) {\n      if (k === 'skew' && Array.isArray(v)) {\n        transform[k] = v.map(Number) as [number, number];\n      } else if ((k === 'rotate' || k === 'translate' || k === 'origin' || k === 'scale') && Array.isArray(v)) {\n        transform[k] = v.map(Number) as [number, number, number];\n      } else if (k !== 'origin' && typeof Number(v) === 'number') transform[k] = Number(v);\n    }\n\n    // if origin is not specified\n    // it's important that we have one\n    const { origin } = transform;\n\n    if (Array.isArray(origin) && origin.length >= 2) {\n      const [originX, originY, originZ] = origin.map(Number);\n      transform.origin = [!Number.isNaN(originX) ? originX : cx, !Number.isNaN(originY) ? originY : cy, originZ || cz];\n    } else {\n      transform.origin = [cx, cy, cz];\n    }\n\n    this.segments = transformPath(segments, transform);\n    return this;\n  }\n\n  /**\n   * Rotate path 180deg vertically\n   *\n   * @public\n   */\n  flipX() {\n    this.transform({ rotate: [0, 180, 0] });\n    return this;\n  }\n\n  /**\n   * Rotate path 180deg horizontally\n   *\n   * @public\n   */\n  flipY() {\n    this.transform({ rotate: [180, 0, 0] });\n    return this;\n  }\n\n  /**\n   * Export the current path to be used\n   * for the `d` (description) attribute.\n   *\n   * @public\n   * @return the path string\n   */\n  toString() {\n    return pathToString(this.segments, this.round);\n  }\n}\n\nexport default SVGPathCommander;\n"],"names":["defaultOptions","error","paramsCount","finalizeSegment","path","pathCommand","LK","data","scanFlag","index","pathValue","code","isDigit","invalidPathValue","scanParam","max","start","zeroFirst","hasCeiling","hasDecimal","hasDot","ch","isSpace","skipSpaces","isPathCommand","isDigitStart","isArcCommand","scanSegment","cmdCode","reqParams","paramCounts","i","PathParser","pathString","isPathArray","seg","lk","parsePathString","pathInput","polygonArea","polygon","n","a","b","area","distanceSquareRoot","polygonLength","length","point","Z","z","s","e","p","$","E","P","y","g","r","l","m","h","c","f","w","o","d","A","M","X","O","x","Y","F","T","k","I","v","R","D","N","isAbsoluteArray","pathToAbsolute","mx","my","segment","values","absCommand","absoluteSegment","absValues","j","normalizeSegment","params","px1","py1","px2","py2","result","x1","y1","qx","qy","nqx","nqy","isNormalizedArray","pc","paramsParser","normalizePath","ii","seglen","midPoint","t","ax","ay","bx","by","segmentLineFactory","x2","y2","distance","angleBetween","v0","v1","v0x","v0y","v1x","v1y","getPointAtArcSegmentLength","RX","RY","angle","LAF","SF","abs","sin","cos","sqrt","PI","rx","ry","xRotRad","dx","dy","transformedPoint","radiiCheck","cSquareNumerator","cSquareRootDenom","cRadicand","cCoef","transformedCenter","center","startVector","startAngle","endVector","sweepAngle","alpha","ellipseComponentX","ellipseComponentY","segmentArcFactory","X1","Y1","X2","Y2","distanceIsNumber","LENGTH","prev","cur","POINT","POINTS","sampleSize","dv","getPointAtCubicSegmentLength","c1x","c1y","c2x","c2y","t1","segmentCubicFactory","getPointAtQuadSegmentLength","cx","cy","segmentQuadFactory","pathLengthFactory","isM","MIN","MAX","min","ll","getPathBBox","xMin","yMin","xMax","yMax","width","height","fixArc","allPathCommands","ni","isCurveArray","rotateVector","rad","arcToCubic","recursive","d120","res","xy","f1","f2","rx2","ry2","df","f2old","x2old","y2old","c1","s1","c2","s2","hx","hy","m1","m2","m3","m4","newres","quadToCubic","r13","r23","lineToCubic","segmentToCubic","args","px","py","pathToCurve","getCubicSegArea","getPathArea","len","getTotalLength","getDrawDirection","getPointAtLength","getPropertiesAtLength","pathArray","pathTemp","pathLength","lengthAtSegment","segments","getPropertiesAtPoint","normalPath","distanceTo","precision","scan","closest","scanDistance","bestLength","bestDistance","scanLength","before","after","beforeLength","afterLength","beforeDistance","afterDistance","getClosestPoint","getSegmentOfPoint","getSegmentAtLength","isPointInStroke","isValidPath","isRelativeArray","shapeParams","getLinePath","attr","getPolyPath","points","getCirclePath","getEllipsePath","getRectanglePath","shapeToPathArray","element","ownerDocument","win","supportedShapes","targetIsElement","tagName","type","shapeAttrs","config","roundPath","roundOption","round","pow","pi","pathToString","shapeToPath","replace","doc","description","name","value","splitPath","composite","pathToRelative","relativeCommand","relativeSegment","relValues","segLength","shortenSegment","normalSegment","prevCommand","round4","segmentValues","normalValues","optimizePath","absolutePath","relativePath","reverseCurve","rotatedCurve","curveOnly","_","reversePath","isClosed","reversedPath","prevSeg","nextSeg","pLen","getSVGMatrix","transform","matrix","CSSMatrix","origin","originX","originY","translate","rotate","skew","scale","translatePoint","cssm","projection2d","point2D","originZ","relativePositionX","relativePositionY","relativePositionZ","transformPath","jj","lx","ly","transformProps","normalizedPath","defaultOrigin","matrixInstance","transformedPath","splitCubic","pts","p0","p1","p2","p3","p4","p5","p6","p7","p8","p9","SVGPathCommander","instanceOptions","undefPath","cz","originOption","pathScale","onlySubpath","split","subPath","absoluteMultiPath","source","__publicField"],"mappings":"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","x_google_ignoreList":[20]}